{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/javascript-10ObjectLiteral/","result":{"data":{"site":{"siteMetadata":{"title":"Jiman's Blog","author":"Jeong Jiman","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"2dfcd676-df5d-5318-8bda-21db70bcb4eb","excerpt":"객체 리터럴 앞의 데이터 타입(data type) 에서 자바스크립트의 데이터 타입에는 원시 타입(primitive type)과 객체 타입(object/referrence type) 이 있다는 것을 알았다 리터럴은 값을 생성하는 표현식이다. 이번 챕터에서는 객체 리터럴(object literal), 즉 객체 값을 생성하는 표현식과 특징들을 알아볼 것이다.…","html":"<h1 id=\"객체-리터럴\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"객체 리터럴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 리터럴</h1>\n<ul>\n<li>앞의 데이터 타입(data type) 에서 자바스크립트의 데이터 타입에는 원시 타입(primitive type)과 객체 타입(object/referrence type) 이 있다는 것을 알았다</li>\n<li>리터럴은 값을 생성하는 표현식이다.</li>\n<li>이번 챕터에서는 객체 리터럴(object literal), 즉 객체 값을 생성하는 표현식과 특징들을 알아볼 것이다.</li>\n</ul>\n<h2 id=\"1-객체란\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9D%EC%B2%B4%EB%9E%80\" aria-label=\"1 객체란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 객체란?</h2>\n<p>자바스크립트가 <strong>객체기반의 프로그래밍 언어</strong>라는 말은 많이 들었다. 그렇다면 여기서 말하는 객체란 무엇일까?</p>\n<p>자바스크립트 언어에는 여러 값(value)들이 있다.</p>\n<ul>\n<li><strong>원시 값(primitive value)를 제외한 모든 값</strong>은 객체이다.</li>\n<li>함수, 배열, 정규표현식 등은 모두 객체이다.</li>\n</ul>\n<p>그렇다면 이 객체라는 값은 어떤 특징을 가지고 있을까??</p>\n<p>원시값과 비교해보면,</p>\n<ul>\n<li>원시 값은 <strong>변경 불가한 값(immutable value)</strong> 인 반면에, 객체는 <strong>변경 가능한 값(mutable value)</strong>이다.</li>\n<li>\n<p>원시 타입은 <strong>하나의 값</strong>만을 가지지만 객체 타입은 <strong>여러 타입의 값</strong>들을 하나의 묶음으로서 가진다.</p>\n<ul>\n<li>표현식이 원시타입으로 평가될 때 하나의 메모리에 저장된 하나의 값으로 평가된다.</li>\n</ul>\n</li>\n</ul>\n<p>객체의 특징을 객체의 구조와 함께 알아보자</p>\n<h3 id=\"11-객체의-구조\" style=\"position:relative;\"><a href=\"#11-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"11 객체의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 객체의 구조</h3>\n<p>객체는 여러타입의 값들을 하나의 묶음으로 가진다고 하였다.</p>\n<p>여기서 값들은 정확히는 0개 이상의 <strong>프로퍼티</strong> 를 나타낸다</p>\n<h4 id=\"객체는-프로퍼티의-집합이다\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%8A%94-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%9D%98-%EC%A7%91%ED%95%A9%EC%9D%B4%EB%8B%A4\" aria-label=\"객체는 프로퍼티의 집합이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체는 프로퍼티의 집합이다</h4>\n<p><strong>프로퍼티는 식별자의 상태(state), 동작을 나타낸다.</strong></p>\n<ul>\n<li>객체는 프로퍼티(property)의 집합이다</li>\n<li>프로퍼티는 키(key)와 값(value)로 구성된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var student = {\n\tname: &#39;Jiman&#39;, //프로퍼티\n\tage: 23 // 프로퍼티\n};\n//name, age 는 프로퍼티 키(key), &#39;Jiman&#39;, 23 은 각각 키에 대한 프로퍼티 값(value)이다/</code></pre></div>\n<ul>\n<li>\n<p>프로퍼티 값은 <strong>어떤 데이터 타입</strong>도 가질 수 있다(원시값 or 객체)</p>\n<ul>\n<li>프로퍼티 값이 함수일 때 그 프로퍼티는 <strong>메서드</strong>라고 명명한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var gun = {\n\tbullet: 10, // 프로퍼티\n\tshot: function(){\n\t\tthis.bullet--;\n\t} // 프로퍼티이다. 프로퍼티 값으로 객체 타입인 함수를 사용하였다.\n};\n// 프로퍼티 값이 함수일 경우 그 프로퍼티는 &#39;메서드&#39; 라고 한다.</code></pre></div>\n<p>메서드도 프로퍼티이지만 값으로 사용되는 프로퍼티와 구조와 사용방식이 다르므로 구분해서 설명해보자.</p>\n<p>여기까지, 객체는 <strong>프로퍼티와 메서드의 집합</strong>이라는 것을 알 수 있다.</p>\n<h5 id=\"프로퍼티와-메서드\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"프로퍼티와 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티와 메서드</h5>\n<ul>\n<li>프로퍼티 : 객체의 상태를 나타내는 <strong>값(data)</strong></li>\n<li>메서드 : 객체의 프로퍼티(data)를 참조하고 조작할 수 있는 <strong>동작(behavior)</strong></li>\n</ul>\n<h4 id=\"정리해보면\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%B4%EB%B3%B4%EB%A9%B4\" aria-label=\"정리해보면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리해보면!</h4>\n<ul>\n<li>객체는 자바스크립트의 값(value)이다. 원시값 이외는 모두 객체!</li>\n<li>프로퍼티의 집합이다. 프로퍼티는 여러 타입의 값을 가질 수 있다.</li>\n<li>프로퍼티 값이 객체일 수도 있으며 함수일 경우 그 프로퍼티를 메서드라고한다.</li>\n</ul>\n<p>객체 지향 프로그래밍이란 <strong>객체들의 집합</strong>으로 프로그램을 표현하려는 프로그래밍 패러다임이다.</p>\n<h2 id=\"2-객체-리터럴에-의한-객체-생성\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%97%90-%EC%9D%98%ED%95%9C-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"2 객체 리터럴에 의한 객체 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 객체 리터럴에 의한 객체 생성</h2>\n<p>지금까지 객체가 무엇인지 알아보았다. 이젠 객체라는 값을 생성할 수 있는 방법을 알아보자.</p>\n<p>값을 생성하려고 할때 <strong>표현식</strong>을 작성하며, 특정 타입의 값을 표기 자체로 생성하려고 할때 표현식으로써 <strong>리터럴</strong>을 사용한다.</p>\n<p>리터럴은 값을 나타내는 약속된 기호이다. <strong>객체 값을 생성하는 리터럴</strong>이 존재한다.</p>\n<h3 id=\"객체-리터럴의-사용\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%98-%EC%82%AC%EC%9A%A9\" aria-label=\"객체 리터럴의 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 리터럴의 사용</h3>\n<ul>\n<li>객체리터럴은 중괄호{} 안에 프로퍼티들을 정의하는 방식이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var cafe = {\n\tcoffee: [&#39;americano&#39;,&#39;latte&#39;, &#39;chocolate&#39;],\n\tsales: [0,0,0],\n\tshowMenu: function(){\n\t\tconsole.log(this.coffee.toString());\n\t},\n\tchooseCoffee: function(num){\n\t\tswitch(num){\n\t\t\tcase 1:\n\t\t\t\tthis.sales[0]++;\n\t\t\t\tconsole.log(&#39;아메리카노 팔림&#39;);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tthis.sales[1]++;\n\t\t\t\tconsole.log(&#39;라떼 팔림&#39;);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tthis.sales[2]++;\n\t\t\t\tconsole.log(&#39;초콜릿 팔림&#39;);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n};\n\nconsole.log(typeof cafe); // object\nconsole.log(cafe);\n//{\n  coffee: [ &#39;americano&#39;, &#39;latte&#39;, &#39;chocolate&#39; ],\n  sales: [ 0, 1, 0 ],\n  showMenu: [Function: showMenu],\n  chooseCoffee: [Function: chooseCoffee]\n}\n\n//지금 카페라서 한번 만들어봤다.</code></pre></div>\n<ul>\n<li>프로퍼티를 정의하지 않으면 빈 객체가 생성된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var cafe = {};\nconsole.log(typeof cafe); // object</code></pre></div>\n<h3 id=\"객체-리터럴은-코드블록과-다르다\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%80-%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D%EA%B3%BC-%EB%8B%A4%EB%A5%B4%EB%8B%A4\" aria-label=\"객체 리터럴은 코드블록과 다르다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 리터럴은 코드블록과 다르다</h3>\n<p>코드 블록은 {} 안에 문들을 작성하는 방식으로 쓰인다는 점에서 객체 리터럴과 비슷하게 보인다. 하지만, 차이가 있다.</p>\n<h4 id=\"객체-리터럴은-값으로-평가되는-표현식이다\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%80-%EA%B0%92%EC%9C%BC%EB%A1%9C-%ED%8F%89%EA%B0%80%EB%90%98%EB%8A%94-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%B4%EB%8B%A4\" aria-label=\"객체 리터럴은 값으로 평가되는 표현식이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 리터럴은 값으로 평가되는 표현식이다.</h4>\n<p>코드블록은 {} 안에 문들을 작성하는 블록문이다. 자체종결성이 있어 세미콜론을 붙이지 않는다.</p>\n<p>그에반해, 객체리터럴은 표현식이다. 중괄호 뒤에 세미콜론을 붙인다.</p>\n<p>여기까지, 객체의 개념과 객체를 생성하는 방법도 알았다. 지금부터는 객체에 대해 구체적으로 알아보자.</p>\n<h2 id=\"3-프로퍼티\" style=\"position:relative;\"><a href=\"#3-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"3 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 프로퍼티</h2>\n<p>객체는 프로퍼티들의 집합이다. 이 프로퍼티들은 <strong>키와 값</strong>으로 구성된다.</p>\n<ul>\n<li>프로퍼티는 세미콜론이 아닌, 쉼표로 구분한다.</li>\n<li>마지막 프로퍼티 뒤에는 일반적으로 쉼표를 사용하지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var myMajor = {\n\tname: &#39;Industrial Engineering&#39;,\n\tgrade: 4.2\n};</code></pre></div>\n<p>프로퍼티의 키(key), 값(value) 에는 어떤 값이 와야될까?</p>\n<ul>\n<li>프로퍼티 키 : 빈 문자열’ ‘을 포함하는 모든 <strong>문자열</strong> 또는 <strong>심벌 값</strong></li>\n<li>프로퍼티 값 : 자바스크립트의 모든 값</li>\n</ul>\n<h3 id=\"프로퍼티-키의-네이밍-규칙\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%82%A4%EC%9D%98-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99\" aria-label=\"프로퍼티 키의 네이밍 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 키의 네이밍 규칙</h3>\n<p>프로퍼티 키는 프로퍼티 값에 접근할 수 있는 이름이다. 즉 <strong>식별자</strong> 역할을 한다.</p>\n<p>식별자들은 일반적으로 식별자 네이밍 규칙을 따른다. 하지만 프로퍼티 키는 식별자 역할을 하지만 네이밍 규칙을 반드시 따라야 되는 것은 아니다. 즉, 식별자 네이밍 규칙을 준수할 수 도, 그렇지 않을수도 있다.</p>\n<h4 id=\"프로퍼티-키는-어떻게-네이밍하는가\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%82%A4%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%84%A4%EC%9D%B4%EB%B0%8D%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"프로퍼티 키는 어떻게 네이밍하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 키는 어떻게 네이밍하는가</h4>\n<p>심벌 값 OR 문자열을 사용(<strong>일반적으로 문자열을 사용한다</strong>)</p>\n<ul>\n<li>문자열은 따옴표로 묶어야하지만 식별자 네이밍 규칙을 준수하는 경우, 따옴표를 생략할 수 있다.</li>\n<li>식별자 네이밍 규칙을 따르지 않는다면 따옴표를 사용해야한다.</li>\n</ul>\n<p><code class=\"language-text\">자바스크립트에서 식별자이름으로 쓸 수 있는 모든 표기는 식별자 네이밍 규칙을 준수한 것이다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var phoneNumber = {\n\tfirstPin : 010,// 식별자 네이밍 규칙 준수\n\t&#39;second-pin&#39; : 9453, // 식별자 네이밍 규칙 미준수\n}</code></pre></div>\n<p>식별자 네이밍 규칙을 준수한 프로퍼티키 firstPin은 따옴표를 사용하지 않았어도 문자열로 평가된다.</p>\n<p>하지만 식별자 네이밍 규칙을 준수하지 않은 프로퍼티키 second-pin은 따옴표를 생략할 수 없다. 만약 따옴표를 생략한다면 자바스크립트 엔진은 - 연산자 표현식으로서 second-pin을 해석할 것이다.</p>\n<h5 id=\"따옴표를-생략한다면\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EC%98%B4%ED%91%9C%EB%A5%BC-%EC%83%9D%EB%9E%B5%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"따옴표를 생략한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따옴표를 생략한다면?</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var phoneNumber = {\n\tfirstPin : 010,\n\tsecond-pin : 9453, // SyntaxError 발생\n}</code></pre></div>\n<h3 id=\"프로퍼티-키의-추가적인-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%82%A4%EC%9D%98-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-%ED%8A%B9%EC%A7%95\" aria-label=\"프로퍼티 키의 추가적인 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 키의 추가적인 특징</h3>\n<ul>\n<li>\n<p>문자열 or 문자열로 평가되는 표현식으로, 프로퍼티 키를 동적을 생성가능하다.</p>\n<ul>\n<li>표현식을 대괄호 []로 묶어서 시용</li>\n</ul>\n</li>\n<li>\n<p>빈문자열을 프로퍼티 키로 사용해도 에러가 발생하지 않음</p>\n<ul>\n<li>but 의미가 없으므로 권장 안함</li>\n</ul>\n</li>\n<li>문자열, 심벌 값 이외의 값을 사용하면 문자열로 암묵적 타입변환된다.</li>\n<li>\n<p>예약어 (var, function 등) 를 프로퍼티 키로 사용가능하다</p>\n<ul>\n<li>권장하지는 않는다</li>\n</ul>\n</li>\n<li>기존에 있던 프로퍼티 키를 중복선언 하게되면 나중에 선언된 프로퍼티키가 먼저 선언한 프로퍼티 키를 덮어 쓴다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//프로퍼티 키의 동적 생성\nvar student = {};\nvar key = &#39;name&#39;;\n\nstudent[key] = &#39;jiman&#39;;\nstudent[&#39;age&#39;] = 23;\n\nconsole.log(student); // { name: &#39;jiman&#39;, age: 23 }\n\n\n// 빈 문자열을 프로퍼티 키로 사용해도 에러가 발생하지 않는다.\nvar emptyKey = {\n\t&#39;&#39;: &#39;&#39;;\n}\nconsole.log(emptyKey);\n// {&#39;&#39;: &#39;&#39;}\n\n\n// 프로퍼티 키에 문자열 이외의 값(숫자 등)을 사용해도 암묵적 타입변환\nvar otherKey = {\n\t0: &#39;a&#39;,\n\t1: &#39;b&#39;,\n\t2: &#39;c&#39;\n};\nconsole.log(otherKey);\n// {0: &#39;a&#39;, 1: &#39;b&#39;, 2: &#39;c&#39;}\n\n\n//프로퍼티 키로 예약어 사용해도 에러발생 no\nvar usingReservedWord = {\n\tvar: &#39;var&#39;,\n\tfunction: &#39;function&#39;\n};\nconsole.log(usingReservedWord);\n//{var: &#39;var&#39;, function: &#39;function&#39;}\n\n\n//프로퍼티 키 중복선언시 덮어씀\nvar overlapKey  = {\n\tage: 23,\n\tage: 24\n};\n\nconsole.log(overlapKey);\n//{age: 24}</code></pre></div>\n<h2 id=\"4-메서드\" style=\"position:relative;\"><a href=\"#4-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"4 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 메서드</h2>\n<p>객체의 프로퍼티 값(vale) 에는 자바스크립트의 모든 datatype의 값이 올 수 있다고 하였다.</p>\n<p>datatype</p>\n<ul>\n<li>원시값</li>\n<li>객체</li>\n</ul>\n<p>즉 원시값과 객체 값이 모두 올 수 가 있다. 함수는 <strong>객체 타입의 값</strong> 이다. 그렇다면 함수도 프로퍼티 값에 올 수 있다.</p>\n<h3 id=\"메서드-함수를-프로퍼티-값으로-가지는-프로퍼티\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B0%92%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%A7%80%EB%8A%94-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"메서드 함수를 프로퍼티 값으로 가지는 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드: 함수를 프로퍼티 값으로 가지는 프로퍼티</h3>\n<p>함수가 객체의 프로퍼티 값으로 왔을때, 일반함수와의 구분을 위해서 메서드(method)라고 부른다. 즉 메서드는 객체안에 있는 함수이다.</p>\n<p>일반적으로 메서드는 객체안의 프로퍼티를 참조하고, 조작할때 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var musicPlayer = {\n\tsongList: [&#39;song1&#39;,&#39;song2&#39;,&#39;song3&#39;],\n\tshowList: function(){\n\t\tconsole.log(this.songList);\n\t}\n};\n\nconsole.log(musicPlayer.songList());\n// [ &#39;song1&#39;, &#39;song2&#39;, &#39;song3&#39; ]</code></pre></div>\n<h2 id=\"5-프로퍼티-접근\" style=\"position:relative;\"><a href=\"#5-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%A0%91%EA%B7%BC\" aria-label=\"5 프로퍼티 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 프로퍼티 접근</h2>\n<p>객체를 생성했다면. 해당 객체가 가지고 있는 프로퍼티를 이용하거나, 프로퍼티 값을 변경하기 위해 프로퍼티에 접근할 필요가 있다.</p>\n<p><code class=\"language-text\">객체의 프로퍼티에 어떻게 접근할 수 있을까 ?</code></p>\n<p>프로퍼티에 접근하기위해 연산자를 사용하는데, 두가지 방법이 있다.</p>\n<ul>\n<li>마침표 표기법(dot notation) : 마침표 프로퍼티 접근연산자 . 사용</li>\n<li>대괄호 표기법(bracket notation) : 대괄호 프로퍼티 접근 연산자[] 사용</li>\n</ul>\n<p>프로퍼티 접근연산자는 객체로 평가되는 표현식 우측에 표기한다. 프로퍼티 접근연산자 마침표 . 우측에 / 프로퍼티 접근연산자 대괄호 [] 안에 프로퍼티 키를 표기한다.</p>\n<p>대괄호 표기법의 경우 안의 키 이름을 따옴표로 감싸주어야한다. 대괄호 안의 키를 따옴표로 감싸지 않는다면 자바스크립트 엔진이 식별자로 해석한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var approach = {\n\tkey = &#39;value&#39;\n} ;\n// 마침표 표기법\nconsole.log(approach.value); // value\n// 대괄호 표기법\nconsole.log(approach[&#39;key&#39;]);// value 키는 따옴표로 감싼다\n// 대괄호 표기법에서 따옴표로 감싸지 않는다면\nconsole.log(approach[key]); // ReferenceError 발생</code></pre></div>\n<p><code class=\"language-text\">객체에 존재하지 않는 프로퍼티에 접근한다면?</code></p>\n<p>undefined 를 반환한다 (ReferenceError을 발생시키지 않는다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var obj = {\n\tkey1 = &#39;&#39;\n}\n\nconsole.log(obj.key2); //undefined</code></pre></div>\n<p><code class=\"language-text\">식별자 네이밍 규칙을 미준수한 프로퍼티에 접근하려면?</code></p>\n<p>다음과 같은 사항을 유의하자</p>\n<ul>\n<li>반드시 대괄호 표기법 이용</li>\n<li>\n<p>프로퍼티 키가 숫자인 경우 따옴표 생략 가능</p>\n<ul>\n<li>그 외의 경우 따옴표로 감싼 문자열로 표기</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//식별자 네이밍 규칙을 미준수한 프로퍼티 (ex -연산자 사용)\nvar person = {\n\t&#39;last-name&#39;: &#39;Jeong&#39;,\n\t23: &#39;age&#39;\n};\n\n//마침표 표기법으로 접근(에러)\nperson.&#39;last-name&#39;;//SyntaxError\nperson.last-name; // 브라우저에서 NaN / Node.js 에서 ReferenceError\n\n//대괄호 표기법으로 접근(따옴표 써줘야됨)\nperson[last-name]; //ReferenceError\nperson[&#39;last-name&#39;]; //Jeong\n\n//단 프로퍼티가 숫자라면 따옴표 생략가능\nperson[23]; // age\nperson[&#39;23&#39;]; // age</code></pre></div>\n<h2 id=\"6-프로퍼티-값-갱신\" style=\"position:relative;\"><a href=\"#6-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B0%92-%EA%B0%B1%EC%8B%A0\" aria-label=\"6 프로퍼티 값 갱신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 프로퍼티 값 갱신</h2>\n<p>이미 존재하는 프로퍼티의 값을 변경할 수 있다. 키를 직접 호출해(키에 접근해) 변경하거나 메서드를 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var myAge = {\n\tage: 23\n};\n\nmyAge.age=24;\nconsole.log(myAge); // {age: 24}</code></pre></div>\n<h2 id=\"7-프로퍼티-동적-생성\" style=\"position:relative;\"><a href=\"#7-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%8F%99%EC%A0%81-%EC%83%9D%EC%84%B1\" aria-label=\"7 프로퍼티 동적 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 프로퍼티 동적 생성</h2>\n<p>객체 내에 존재하지 않는 프로퍼티를 임의로 표기하고 값을 할당하면 어떻게 될까?</p>\n<p>프로퍼티가 동적으로 생성되며, 객체 내에 추가되고 프로퍼티 값도 할당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var closet ={\n\touter : 2\n};\n\ncloset.inner = 5;\nconsole.log(closet); // { outer: 2, inner: 5 }</code></pre></div>\n<h2 id=\"8-프로퍼티-삭제\" style=\"position:relative;\"><a href=\"#8-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%82%AD%EC%A0%9C\" aria-label=\"8 프로퍼티 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 프로퍼티 삭제</h2>\n<p>객체 내의 프로퍼티를 삭제하고 싶다면 delete 연산자를 사용한다.</p>\n<p>delete 연산자의 피연산자는 객체의 프로퍼티에 접근할 수 있는 표현식이어야한다. 주의할 점은 객체 내에 존재하지 않는 프로퍼티를 삭제해도 에러발생없이 넘어간다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var person = {\n\tname: &#39;Jeong&#39;\n};\n\n//delete 연산자를 이용한 프로퍼티 삭제\n\ndelete person.name;\nconsole.log(person); //{}</code></pre></div>\n<p>쓰지 않도록 하자. 애초에 삭제할 프로퍼티를 만들지 말자!</p>\n<h2 id=\"9-es6에서-추가된-객체-리터럴의-확장-기능\" style=\"position:relative;\"><a href=\"#9-es6%EC%97%90%EC%84%9C-%EC%B6%94%EA%B0%80%EB%90%9C-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%98-%ED%99%95%EC%9E%A5-%EA%B8%B0%EB%8A%A5\" aria-label=\"9 es6에서 추가된 객체 리터럴의 확장 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. ES6에서 추가된 객체 리터럴의 확장 기능</h2>\n<h3 id=\"91-프로퍼티-축약-표현\" style=\"position:relative;\"><a href=\"#91-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%B6%95%EC%95%BD-%ED%91%9C%ED%98%84\" aria-label=\"91 프로퍼티 축약 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.1 프로퍼티 축약 표현</h3>\n<p>ES6에서는 프로퍼티 값으로 <strong>변수</strong>를 사용하는 경우 변수의 이름과 프로퍼티 키가 동일한 이름이라면 프로퍼티 키를 생략할수 있다</p>\n<p>프로퍼티 키는 변수이름으로 자동 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//ES5\nvar x = 1, y = 2;\n\nvar obj = {\n\tx: x,\n\ty: y\n};\nconsole.log(obj);// {x: 1, y: 2}\n\n// ES6에서의 축약 표현\n\nvar obj1 = [x,y];\n\nconsole.log(obj1); // {x: 1, y: 2}</code></pre></div>\n<h3 id=\"92-계산된-프로퍼티-이름\" style=\"position:relative;\"><a href=\"#92-%EA%B3%84%EC%82%B0%EB%90%9C-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%B4%EB%A6%84\" aria-label=\"92 계산된 프로퍼티 이름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.2 계산된 프로퍼티 이름</h3>\n<p>앞에서, 문자열 또는 문자열로 타입 변환할 수 있는 값으로 평가되는 표현식을 사용해 프로퍼티 키를 동적으로 생성할 수 있다고 하였다. 여기서는 대괄호 프로퍼티 접근 연산자를 사용하는데, 표현식에는 계산식이 들어갈 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var prefix = &#39;prop&#39;;\nvar i= 0;\n\nvar obj = {};\n\nobj[prefix + &#39;-&#39; + ++i] = i;\nobj[prefix + &#39;-&#39; + ++i] = i;\nobj[prefix + &#39;-&#39; + ++i] = i;\n\nconsole.log(obj) // {prop-1: 1, prop-2: 2, prop-3: 3}\n\n//ES6에서는 객체 리터럴 내부에서도 계산된 프로퍼티 이름으로 동적 생성 가능하다.\n\nconst prefix = &#39;prop&#39;;\nlet i = 0;\n\n//객체 리터럴 내부에서 computed property name 으로 프로퍼티 키 생성\n\nconst obj = {\n\t[`${prefix}-${++i}`]: i,\n\t[`${prefix}-${++i}`]: i,\n\t[`${prefix}-${++i}`]: i\n};\n\nconsole.log(obj);\n//{prop-1: 1, prop-2: 2, prop-3: 3}</code></pre></div>\n<h3 id=\"93-메서드-축약-표현\" style=\"position:relative;\"><a href=\"#93-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B6%95%EC%95%BD-%ED%91%9C%ED%98%84\" aria-label=\"93 메서드 축약 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.3 메서드 축약 표현</h3>\n<p>ES5 에서 메서드를 표기할 때 프로퍼티 키와 값을 명확히 구분해줬지만 ES 6에서는 축약표현을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//ES5\nvar coffeeMachine = {\n\tcoffee: 10,\n\treleaseCoffee : function() {\n\t\tthis.coffee--;\n\t\tconsole.log(`남은 커피 수는 ${this.coffee}개 입니다`)\n\t}\n}\n\n//ES6\nvar coffeeMachine = {\n\tcoffee: 10,\n\treleaseCoffee() {\n\t\tthis.coffee--;\n\t\tconsole.log(`남은 커피 수는 ${this.coffee}개 입니다`)\n\t}\n}</code></pre></div>","frontmatter":{"title":"javascript 10ObjectLiteral","date":"August 27, 2020"}}},"pageContext":{"slug":"/javascript/javascript-10ObjectLiteral/","previous":{"fields":{"slug":"/javascript/javascript-09Casting-ShortCircuit/"},"frontmatter":{"title":"javascript 09Casting&ShortCircuit","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/javascript-ASCII-Unicode/"},"frontmatter":{"title":"javascript ASCII, Unicode","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}