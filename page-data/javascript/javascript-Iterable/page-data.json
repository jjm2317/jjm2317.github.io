{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/javascript-Iterable/","result":{"data":{"site":{"siteMetadata":{"title":"Jiman's Blog","author":"Jeong Jiman","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a163a5b9-b215-55a3-b18f-0e75785c19dd","excerpt":"이터러블 이터레이션 프로토콜 자바스크립트에는 다음과 같은 순회가능한 자료구조가 있다. 배열 문자열 유사배열객체 DOM컬렉션 등등 위와 같은 자료구조들은 for in, for 문 등으로 순회 가능하다는 공통점이 있다. 그럼 자바스크립트 내부적으로 일정한 규약이 내부슬롯, 내부 메서드 등으로 정의되어 있을 것이라고 예상할 수 있다. But, ES5까지는?통일된 규약 없이 각자의 방식으로 순회가능한 자료구조를 구현하였다. ES6에서는 규격이 일원화 ES…","html":"<h1 id=\"이터러블\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94\" aria-label=\"이터러블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이터러블</h1>\n<h2 id=\"이터레이션-프로토콜\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"이터레이션 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이터레이션 프로토콜</h2>\n<p>자바스크립트에는 다음과 같은 순회가능한 자료구조가 있다.</p>\n<ul>\n<li>배열</li>\n<li>문자열</li>\n<li>유사배열객체</li>\n<li>DOM컬렉션</li>\n<li>등등</li>\n</ul>\n<p>위와 같은 자료구조들은 for in, for 문 등으로 순회 가능하다는 공통점이 있다.</p>\n<p>그럼 자바스크립트 내부적으로 일정한 규약이 내부슬롯, 내부 메서드 등으로 정의되어 있을 것이라고 예상할 수 있다.</p>\n<p><strong>But, ES5까지는?</strong>통일된 규약 없이 각자의 방식으로 순회가능한 자료구조를 구현하였다.</p>\n<p><strong>ES6에서는 규격이 일원화</strong></p>\n<p>ES6부터 순회가능한 자료구조들이 <strong>이터레이션 프로토콜</strong>을 준수하는 <strong>이터러블</strong>로 통일되었다.</p>\n<p>즉 이터레이션 프로토콜은 자료구조를 순회하기 위해 미리 약속된 규칙이라고 할 수 있다.</p>\n<p>이터레이션 프로토콜의 종류로 두가지가 있다.</p>\n<ul>\n<li>이터러블 프로토콜</li>\n<li>이터레이터 프로토콜</li>\n</ul>\n<p><strong>이터러블 프로토콜</strong></p>\n<p>Symbol.iterator를 프로퍼티 키로 가진 메서드를 호출 하면 <strong>이터레이터 프로토콜</strong>을 준수한 이터레이터를 반환한다.</p>\n<p>이러한 규약을 이터러블 프로토콜이라한다. 이터러블 프로토콜을 준수한 객체를 이터러블이라고 한다.</p>\n<p><strong>이터레이터 프로토콜</strong></p>\n<p>이터러블의 Symbol.iterator 메서드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환한다.</p>\n<p><strong>이터레이터는 next 메서드를 가지며 next 메서드를 호출하면 이터러블을 순회하며 value, done 프로퍼티를 갖는 이터레이터 리절트 객체를 반환</strong>한다. 이러한 규약을 이터레이터 프로토콜이라한다. 이터레이터 프로토콜을 준수한 객체를 이터레이터라고 한다.</p>\n<p>즉 이터러블이 되기위해서는 다음과 같은 조건이 필요하다.</p>\n<ol>\n<li>Symbol.iterator를 호출하여 이터레이터를 반환 (이터러블 프로토콜 )</li>\n<li>next 메서드를 가지며 next 메서드를 호출하였을 때 value, done 프로퍼티를 갖는 이터레이터 리절트 객체를 반환(이터레이터 프로토콜)</li>\n</ol>\n<h3 id=\"이터러블-1\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-1\" aria-label=\"이터러블 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이터러블</h3>\n<p>이터러블 프로토콜을 준수한 객체이다. 이터러블은 Symbol.iterator를 키로 가진 메서드를 갖는데 이 메서드는 해당 객체에서 직접 구현될 수도 있고 프로토타입 체인을 통해 상속받을 수도 있다. 다음은 이터러블인지 확인하는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isIterable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> v<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span></code></pre></div>\n<p><strong>이터러블 예시</strong></p>\n<ul>\n<li>문자열</li>\n<li>배열</li>\n<li>Set</li>\n<li>Map</li>\n</ul>\n<p><strong>프로토타입체인을 통해 Symbol.iterator를 상속받는 경우</strong></p>\n<p>대표적인 자료구조로 array가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>특징</p>\n<ul>\n<li>for of 문으로 순회가능하다.</li>\n<li>스프레드 문법 대상이 된다.</li>\n<li>배열 디스트럭쳐링 할당의 대상으로 사용가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// for of 문으로 순회 가능하다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">\"something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 스프레드 문법 대상이 된다.</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 디스트럭쳐링 할당 대상이 된다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>일반 객체가 이터러블이 되려면</strong></p>\n<p>이터러블 프로토콜을 준수해야한다. 즉 사용자 정의 이터러블을 직접 구현함으로서 이터러블을 생성할 수 있다.</p>\n<h3 id=\"이터레이터\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"이터레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이터레이터</h3>\n<p>Symbol.iterator를 호출했을 때 반환되는 객체가 이터레이터이다. 이터레이터 프로토콜을 준수한 이터레이터는 다음과 같은 특징을 갖는다.</p>\n<ul>\n<li>next 메서드 소유</li>\n<li>\n<p>next 메서드를 호출 시 value 와 done 프로퍼티를 갖는 이터레이터 result 객체를 반환한다.</p>\n<ul>\n<li>value는 순회중인 요소의 값, done은 이터러블의 순회 완료 여부를 나타낸다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>이터레이터 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 0, done: false}</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 1, done: false}</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 2, done: false}</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 3, done: true}</span></code></pre></div>\n<h3 id=\"빌트인-이터러블\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94\" aria-label=\"빌트인 이터러블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌트인 이터러블</h3>\n<p>이터레이션 프로토콜을 준수한 객체인 빌트인 이터러블</p>\n<ul>\n<li>Array</li>\n<li>String</li>\n<li>Map</li>\n<li>Set</li>\n<li>arguments</li>\n<li>dom collection</li>\n<li>typedArray</li>\n</ul>\n<h3 id=\"for-of\" style=\"position:relative;\"><a href=\"#for-of\" aria-label=\"for of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for of</h3>\n<p><strong>일반 loop으로 구현하면</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//이터레이터는 next 메서드를 호출하며 d이터레이터 리절트 객체를 반환한다.</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Array.prototype.forEach 메서드와의 비교</strong></p>\n<ul>\n<li>for of 문은 break, continue, return 문을 사용할 수 있다.</li>\n</ul>\n<h3 id=\"유사배열객체\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%82%AC%EB%B0%B0%EC%97%B4%EA%B0%9D%EC%B2%B4\" aria-label=\"유사배열객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유사배열객체</h3>\n<p>인덱스로 요소에 접근할 수 있고, length 프로퍼티를 가지는 객체를 유사배열객체라고 한다. 단 모든 유사배열객체가 이터러블은 아니다.</p>\n<p>유사배열객체이면서 이터러블인 객체는 다음과 같다.</p>\n<ul>\n<li>arguments</li>\n<li>NodeList</li>\n<li>HTMLCollection</li>\n<li>배열</li>\n</ul>\n<h3 id=\"이터레이션-프로토콜의-필요성\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"이터레이션 프로토콜의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이터레이션 프로토콜의 필요성</h3>\n<p>자바스크립트의 순회가능한 자료구조들이 모두 각각의 구현방식을 가지고 있다면 해당 자료구조를 이용하는 문법들에게 각각의 구현방식을 적용해야한다.</p>\n<p>이는 하나로 통일했을 때보다 비효율적이다.</p>\n<p>이터레이션 프로토콜은 자료구조들에 하나의 순회방식을 갖도록 규정하여 효율적으로 자료구조들을 사용할 수 있도록 한다.</p>\n<h3 id=\"사용자-정의-이터러블\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94\" aria-label=\"사용자 정의 이터러블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 정의 이터러블</h3>","frontmatter":{"title":"Iterable","date":"June 09, 2021"}}},"pageContext":{"slug":"/javascript/javascript-Iterable/","previous":{"fields":{"slug":"/javascript/javascript-Symbol/"},"frontmatter":{"title":"javascript Symbol","category":"javascript","draft":false}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}