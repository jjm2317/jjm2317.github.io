{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/javascript-04Variable/","result":{"data":{"site":{"siteMetadata":{"title":"Jiman's Blog","author":"Jeong Jiman","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e9027d35-d219-54b8-bd3f-c5b8b7f8ed55","excerpt":"…","html":"<h1 id=\"변수\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98\" aria-label=\"변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수</h1>\n<p>변수나 함수를 수학에서 생각하는 함수와는개념이 다르다. 변수를 생각할때는 메모리의 관점에서 생각하는 습관을 갖는 것이 중요하다.</p>\n<p><strong>변수는 왜 필요할까?</strong></p>\n<p>애플리케이션 만드는 것을 추상적으로 얘기한다면, <strong>데이터를 저장하고 꺼내와서 가공하고 집어넣는 활동의 반복</strong>이라고 할 수 있다.</p>\n<p>즉, 애플리케이션은 데이터를 다루는 기계라고 할 수 있다. 아무리 복잡한 애플리케이션이라도 데이터를 입력받아 처리하고 그 결과를 출력한다 .세가지 관점에서 애플리케이션을 바라보아야한다. 데이터가 입력되는 케이스는 다양하다</p>\n<p>데이터가 생성되려면 누군가의 입력이 있다. 로그인을 한다고 보면, 아이디와 패스워드를 입력받는 창이 있다. 데이터가 입력이 되었다.</p>\n<p>이제 입력받은 데이터를 처리한다. 입력받은 데이터를 처리했으면 그 결과가 있을 것이다. 그결과를 출력, 아웃풋을 뱉어낸다. 이 세과정의 반복이다. 출력을 뱉어낼때도 어떤식으로 출력을 뱉어낼지 다양하다.</p>\n<p><strong>핵심은 애플리케이션을 동작시키는 코드에서 많은 데이터가 흐른다는 것이다. 이 데이터들을 관리할 필요가 있다. 데이터의 관리를 도와주는 개념이 변수이다.</strong></p>\n<h2 id=\"변수는-메모리의-관점에서-이해해야-한다\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EB%8A%94-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EC%9D%B4%ED%95%B4%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"변수는 메모리의 관점에서 이해해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수는 메모리의 관점에서 이해해야 한다.</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">10 + 20;</code></pre></div>\n<p>10+ 20이라는 식이 있다. 수학의 식과 동일하다. 컴퓨터는 10+20이라는 것을 어떻게 처리할 지 생각해보자</p>\n<p><strong>먼저, 인간은 이 식을 어떻게 바라보는가?</strong></p>\n<p>10이라는 숫자, 20이라는 숫자가 있다. 우리에게는 이 숫자들이 익숙하다. 조선시대 사람들은 잘 모를 것이다. 이이야기를 하는 이유는 컴퓨터가 이 10이라는 기호를 어떻게 이해하느냐를 따지기 위해서이다. 컴퓨터에서는 10이라는 숫자를 리터럴이라고 부른다. +기호는 연산자라고 부른다. 20도 리터럴이다. 10+20을 할때 10이라는 기호를 이해해야한다. 우리는 10을 이해한다. 20이라는 숫자도 금방이해한다. 그 단계를 거칠수없다면 식의 계산은 불가능하다. 계산을 하기위해 전제가 되어야하는 것은 코드, 기호의 의미를 이해하는 것이다.</p>\n<p>이해가 되었다면 계산이 가능해진다. 우리는 문화적으로 좌에서 우로 10부터 읽는다. 10을 읽으면 10을 두뇌에 기억해야된다. 20을 읽을때도 20을 잠깐이라도 기억해야된다. 10과 20을 계산하는 동안에 두뇌에 기억한다. +라는 행위를 머릿속에서 수행할 것이다. 30이라는 숫자로 계산이 될것이고 그 30이라는 숫자도 머리에 기억될것이다. 컴퓨터의 프로세스도 이와 동일하다.</p>\n<p><strong>컴퓨터는 어떨까?</strong></p>\n<p>컴퓨터도 기억하는 부품과 연산하는 부품이 구분되어 있다. 메모리와 CPU이다. 10, 20 을 기억하는 것은 메모리가 하고 +연산만 cPU가 수행할 것이다.</p>\n<p>컴퓨터가 식을 계산하기 위해서는 해석(parsing)해야된다. 10과 20을 인식하고 +를 이해해야된다. 자바스크립트 코드를 시행하는 자바스크립트엔진은 사람과 유사한 과정으로 소스 코드를 실행한다.</p>\n<p>10과 20을 인식하면 운영체제가 메모리가 비어있는 어떤 공간을 지정해준다. 10이라는 것은 한 메모리셀에 저장되고 20도 한 메모리셀에 저장된다. 10이 20이라는 숫자를 CPU에 전달되고 30이라는 결과값이 도출된다. 30도 기억되어야되기 때문에 30도 한 메모리셀에 저장된다. 30이라는 결과값도 사용되어야하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">10 + 20;</code></pre></div>\n<p>0 + 20이라는 코드는 문제가 있다.</p>\n<p>10 + 20을 수행한 것이면 결과값을 사용해야하기 때문이다.</p>\n<p>현 시점에서 30이라는 결과 값은 단 한번만 사용될 수 있다. 10 + 20을 수행했을때 만이다. <strong>재사용이 불가능한 상황이다.</strong> 30이라는 숫자 값은 한 메모리 주소에 들어가 있다. . 30을 사용하려면 메모리주소를 통해서 메모리셀에 접근해서 값을 꺼내와야된다. <strong>자바스크립트는 메모리 주소는 알려주지 않는다.</strong></p>\n<p>그 이유는 무엇일까?</p>\n<p>만약 메모리주소를 알아서 메모리셀에 접근해서 값을바꾼다고 가정해보자</p>\n<p>사람은 실수를 한다. 메모리주소를 한 자라도 잘못입력하면 엄한곳의 값을 변경하는 결과를 초래할 수 있다. 즉 잘못된 메모리주소를 입력해서 시스템에 오류를 발생시키는 것을 방지할 필요가있다.</p>\n<p>여기까지, 메모리 주소에 <strong>직접적으로 접근이 불가</strong>함을 알았다. 그렇다면 값에 어떻게 접근해야될까? 그 방법이 변수이다. 변수는 메모리주소의 이름을 알려준다.</p>\n<p>메모리셀에 접근해서 값을 꺼내오는 것을 참조라고한다. 참조하기위해서는 메모리주소를 알아야하는데 자바스크립트를 비롯한 프로그래밍언어들은 메모리 주소를 직접알려주지않고 메모리 주소를 기억한 변수를 제공한다.</p>\n<p>변수의 정의는 다음과 같다.</p>\n<p><strong>변수는 하나의 값을 저장하기 위해 확보한 메모리공간 자체 또는 그 메모리 공간을 식별하기위해 붙인 이름이다</strong></p>\n<p>결과적으로 변수이름을 가지고 값이 저장되어있는 위치를 알수있고 그 위치를 알기 때문에 메모리공간안의 값을 재사용할 수 있게 되었다.</p>\n<p>10 + 20 이라는 코드는 문법상으로 아무런 문제가 없지만!, 이코드는 무의미하다.</p>\n<p>10 + 20 은 30을 재사용하겠다는 것인데 재사용이 불가하기 때문이다. 변수를 사용해서 이를 개선해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var result = 10 + 20;</code></pre></div>\n<p>var 은 키워드이다. 키워드는 하나의 명령어라고 볼 수 있다. var 뒤에오는 변수를 가지고 하나의 변수를 생성하라는 명령어이다. 이를 키워드라고 부르기도하고 예약어라고 하기도 한다.</p>\n<p>= 은 할당 연산자이다. 10 + 20 이라는 값을 result라는 변수에 저장하라는 의미이다. 이것을 할당(저장, 대입)이라고 한다. 우항에는 값 좌항에는 변수이름이 와야된다.</p>\n<p>값이 안오고 표현식이 아닌문이 온다면 값이 저장할 수 없기 때문에 에러를 발생시킨다.</p>\n<p>변수에 저장되어 있는 값을 읽어들이는 행위를 참조라고한다.</p>\n<p><strong>변수의 필요성에 대해 위 식과 함께 다시한번 정리해보자</strong></p>\n<p>10과 20을 메모리 어딘가에 각각 기억한다. + 연산자로 cpu가 10과 20을가져와서 연산(평가)한다. 30의 결과값이 메모리 어딘가에 또 저장된다. 평가된 값인 30을 재사용하려면 메모리 주소가 필요하다. 메모리주소를 모른다. 메모리 주소대신 변수 이름을 준다. 변수이름을 가지고 우리는 30에 접근할 수 있다. <strong>변수 안에 들어있는 변수값을 꺼내와서 재사용할 수 있다.</strong></p>\n<h2 id=\"식별자\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"식별자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식별자</h2>\n<p>식별자(identifier)는 변수의 상위개념이다. 함수, 클래스명 전부 식별자라고 할 수 있다.</p>\n<p>식별자는 어떤 역할을 할까?</p>\n<p>4gb 메모리가 있다고 하자. 메모리셀이 43억개가 있다. 메모리셀을 꺼내오기 위해서는 식별이 가능해야한다. 즉 어떤 값을 구별해서 가져올 수 있어야한다.</p>\n<p>값은 메모리 공간에 들어가 있다. 식별자를 통해서 메모리공간을 찾아 들어갈 수 있다. 식별자는 메모리 주소를 기억하기 때문에 하나의 값으로 치환될 수 있다. 모든 식별자들은 값을 가져온다.</p>\n<p>변수 함수 클래스 이름을 지을 때는 일정한 규칙을 따라야한다. 그것을 식별자 네이밍 규칙이라고 한다.</p>\n<p><strong>식별자는 고유해야한다.</strong></p>\n<p>식별자들은 언제나 <strong>선언이라는 과정을 통해서 자바스크립트엔진에게 식별자의 존재를 알려야 한다</strong>. 그 이유는 <strong>변수이름을 하나하나 기억하게 해서 중복되지 않게 하기 위해서다.</strong> 식별자가 만들어질때 중복을 체크한다. 선언이라고 하는 것은 앞으로 이러이러하게 할거다라고 공표하는 것이다. 즉 식별자를 사용할 거다라고 알리는것을 <strong>변수선언</strong>이다.</p>\n<h2 id=\"변수-선언\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언</h2>\n<p><strong>변수를 선언하기 위한 키워드</strong></p>\n<p>var 이외에도 let const라는 키워드가 있다. 왜 3개가 있을까 ? ES6 let 과 const 가 도입되었다. var는 지금도 사용되는데, 그 이유는 ES5로 개발한 코드들이 동작하게 하기 위함이다. 이를 하위호환성을 유지하였다고 표현한다.</p>\n<p>var로 하다가 왜 let 과 const를 도입하였을까? 보완점이 있기 때문일 것이다. let과 const 를 이해하기위해 var를 먼저 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score;</code></pre></div>\n<p><strong>키워드와 함께 변수이름을 써주는것을 변수선언이라고한다.</strong> 변수선언은 변수이름을 자바스크립트에게 알려주고 그 이름으로 변수를 생성하라는 것이다. 메모리공간을 확보한다. 다른 애플리케이션들이 사용하지 못하도록 독점하는 것이 메모리공간 확보이다.</p>\n<p>변수 선언은 다음 두단계를 거친다</p>\n<ol>\n<li>선언단계 : 변수 이름을 등록하고 자바스크립트 엔진에 변수의 존재를 알린다. 실행 컨텍스트라는 곳에 등록되며, 메모리 공간이 확보된다.</li>\n<li>\n<p>초기화 단계 : 처음으로 값을 할당하는 행위가 이루어진다. 자바스크립트는 확보한 메모리 공간에 있는 쓰레기 값을 고려하여 undefined로 값을 암묵적으로 할당한다.</p>\n<ul>\n<li>변수 호이스팅이 일어남</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"변수-선언의-실행-시점과-변수-호이스팅\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90%EA%B3%BC-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"변수 선언의 실행 시점과 변수 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언의 실행 시점과 변수 호이스팅</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(score); // undefined\n\nvar score;</code></pre></div>\n<p>일반적인 케이스라면 순서가 뒤바뀌어 있어야하겠지만 위와같이 써도 아무런 에러가 발생하지 않는다. 다른언어에서는 에러가 발생한다.</p>\n<p>위 코드에서 에러발생할만한 상황인데 발생하지 않는다. 변수 선언이 어떻게 실행되는 지 타이밍을 알아야한다.</p>\n<p>식별자를 생성하는 행위를 하는 것은 모든 코드중에서 가장 먼저 실행된다. 소스코드가 한줄한줄 실행되는 시점을 <strong>runtime 런타임</strong>이라고 한다. <strong>런타임이전에 하나의 전처리 과정</strong>이 있다. 그 과정에서 <strong>모든 선언문을 먼저 실행</strong>한다. 그래서 선언문 위에있는 console.log가 undefined로 출력되는 것이다.</p>\n<p>선언이 먼저 이루어지는 것이 변수 호이스팅이라고 한다. <strong>변수호이스팅을 이용해 코드 순서를 바꾸는 것은 지양하도록 하자.</strong> var 키워드는 es5이전부터 있던 키워드 let과 const를 사용하면 변수호이스팅 이 발생하지 않는 것처럼 동작한다.</p>\n<h2 id=\"값의-할당\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9\" aria-label=\"값의 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값의 할당</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score = 80;</code></pre></div>\n<p>위 문을 자바스크립트 엔진이 만나면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score;\nscore = 80;</code></pre></div>\n<p>순으로 실행한다. 그 이유는 <strong>변수 호이스팅</strong> 때문이다. 선언문인 var score 먼저 분리되어 실행된 후 할당문이 실행되는 것이다. var score = 80 은 즉 선언문과 할당문의 축약표현이다.</p>\n<p>할당문을 만나면 undefined 를지우고 80을 쓰는 것이 아니다! 새로운 메모리 공간을 확보해서 80을 저장한 후 변수이름을 80을 저장한 메모리 공간에 연결한다. 그 이유는 컴퓨터 입장에서 그것이 편하기 때문이다. 물론 원시값만 그렇게 동작한다. <strong>원시값은 immutable 하다.</strong></p>\n<p>undefined는 어떻게 되었을까 ?</p>\n<p>score가 기억하고 있던 메모리 주소가 undefined를 저장한 메모리 공간에서 80을 저장한 메모리공간으로 바뀌었다. undefined는 더이상 필요하지 않은 값이다. 메모리공간의 확보를 풀어줘야한다. 이 행위를 해주는 프로그램을 가비지 컬렉터라고 한다.</p>\n<p>가비지컬렉터가 메모리 공간을 해제 해주는 언어를 언매니지드 언어라고 한다.</p>\n<p>프로그래머가 코드로서 메모리공간을 확보하고 해제까지 할 수 있는 언어를 매니지드 언어라고한다.</p>","frontmatter":{"title":"javascript 04Variable","date":"August 24, 2020"}}},"pageContext":{"slug":"/javascript/javascript-04Variable/","previous":{"fields":{"slug":"/development/quick_start/"},"frontmatter":{"title":"Quick Start","category":"development","draft":false}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}