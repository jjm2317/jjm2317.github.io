{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/javascript-16PropertyAttribute/","result":{"data":{"site":{"siteMetadata":{"title":"Jiman's Blog","author":"Jeong Jiman","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"4fd88047-2b27-5afd-9727-f91c4496d12f","excerpt":"프로퍼티 어트리뷰트 1. 내부 슬롯과 내부 메서드 자바스크립트 엔진 내부는? 자바스크립트로 작성한 코드는 자바스크립트 엔진에 의해 해석되고 실행된다. 자바스크립트 엔진도 코드를 실행하기 위해 코딩된 하나의 프로그램이라고 할 수 있다. 자바 스크립트 엔진은 객체지향 언어 C++ 로 코딩되어 있다. 즉 엔진 내부에도 프로그램 구현을 위한 알고리즘이 있다는 이야기이다 . 내부 슬롯, 내부 메서드란 내부 슬롯(internal slot) 과 내부 메서드 (internal method…","html":"<h1 id=\"프로퍼티-어트리뷰트\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%96%B4%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8\" aria-label=\"프로퍼티 어트리뷰트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 어트리뷰트</h1>\n<h2 id=\"1-내부-슬롯과-내부-메서드\" style=\"position:relative;\"><a href=\"#1-%EB%82%B4%EB%B6%80-%EC%8A%AC%EB%A1%AF%EA%B3%BC-%EB%82%B4%EB%B6%80-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1 내부 슬롯과 내부 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 내부 슬롯과 내부 메서드</h2>\n<p><strong>자바스크립트 엔진 내부는?</strong></p>\n<p>자바스크립트로 작성한 코드는 자바스크립트 엔진에 의해 해석되고 실행된다. 자바스크립트 엔진도 코드를 실행하기 위해 코딩된 하나의 프로그램이라고 할 수 있다. 자바 스크립트 엔진은 객체지향 언어 C++ 로 코딩되어 있다. 즉 엔진 내부에도 프로그램 구현을 위한 알고리즘이 있다는 이야기이다 .</p>\n<p><strong>내부 슬롯, 내부 메서드란</strong></p>\n<p>내부 슬롯(internal slot) 과 내부 메서드 (internal method)는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티(pseudo property) 와 의사 메서드(pseudo method) 이다. ECMAScript 사양 에서는 내부슬롯과 내부 메서드를 이중 대괄호( [[]] )로 해당 이름을 감싸서 표현하고 있다.</p>\n<p><strong>내부 슬롯, 내부 메서드의 특징</strong></p>\n<p>내부 슬롯과 내부 메서드는 ECMAScript 사양에 정의된 대로 구현되어 자바스크립트 엔진에서 실제로 동작한다. 하지만 개발자가 직접 접근할 수 있도록 외부로 공개된 객체의 프로퍼티는 아니다.</p>\n<p>내부슬롯과 내부메서드는 자바스크립트 엔진의 내부 로직이므로 원칙적으로 자바스크립트는 내부슬롯과 내부메서드에 직접적으로 접근하거나 호출할 수 있는 방법을 제공하지 않는다. 괜한 문제나 어려움을 유발하지 않기 위해서이다.</p>\n<p>단, 일부 내부 슬롯과 내부 메서드에 한하여 <strong>간접적으로</strong> 접근할 수 있는 수단을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 모든 객체는 [[Prototype]] 이라는 내부슬롯을 갖는다\n// 직접 접근은 불가하며 접근자 프로퍼티로 간접 접근은 가능하다.\n\nconst obj = {};\n\no.[[Prototype]]; // Uncaught SyntaxError\n\no.__proto__ // Object.prototype</code></pre></div>\n<h2 id=\"2-프로퍼티-어트리뷰트와-프로퍼티-디스크립터-객체\" style=\"position:relative;\"><a href=\"#2-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%96%B4%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8%EC%99%80-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0-%EA%B0%9D%EC%B2%B4\" aria-label=\"2 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체</h2>\n<p><strong>프로퍼티 어트리뷰트란</strong></p>\n<p>자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다.</p>\n<p>프로퍼티의 상태란 다음과 같다.</p>\n<ul>\n<li>값(value)</li>\n<li>값의 갱신 가능 여부(writable)</li>\n<li>열거 가능 여부(enumerable)</li>\n<li>재정의 가능 여부(configurable)</li>\n</ul>\n<p>프로퍼티 어트리뷰트는 자바스크립트 엔진이 관리하는 내부 상태 값(meta-property)인 내부 슬롯 [[Value]], [[Writable]], [[Enumerable]], [[Configurable]]를 말한다.</p>\n<p><strong>프로퍼티의 어트리뷰트에 접근하는 법</strong></p>\n<p>프로퍼티 어트리뷰트 역시 직접접근은 불가하다.</p>\n<p>간접적으로 접근하기 위해 Object.getOwnPropertyDiscriptor 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const car = {\n\tprice: 5000\n};\n\nObject.getOwnPropertyDiscriptor(car, &#39;price&#39;);\n//{value: 5000, writable: true, enumerable: true, configurable: true}</code></pre></div>\n<p>메서드를 호출할 때 첫 번째 매개변수에는 객체의 식별자, 두번째는 프로퍼티 키를 문자열로 전달한다.</p>\n<p><strong>주의할 점</strong></p>\n<ul>\n<li>프로퍼티 키는 식별자가 아닌 문자열이다. 인수 전달에 주의해야한다.</li>\n</ul>\n<p><strong>반환 값</strong></p>\n<p>Object.getOwnPropertyDiscriptor 메서드는 프로퍼티 어트리뷰트 정보를 프로퍼티로서 가지는 <strong>프로퍼티 디스크립터(PropertyDescriptor)객체</strong>를 반환한다.</p>\n<ul>\n<li>\n<p>존재하지 않는 프로퍼티를 인수로 전달할 경우</p>\n<ul>\n<li>undefined를 반환</li>\n</ul>\n</li>\n<li>\n<p>상속받은 프로퍼티를 인수로 전달할 경우</p>\n<ul>\n<li>undefined 반환</li>\n</ul>\n</li>\n</ul>\n<p><strong>모든 프로퍼티의 내부 상태를 알고 싶다면</strong></p>\n<p>Object.getOwnPropertyDiscriptor 메서드의 경우 하나의 프로퍼티의 디스크립터 객체를 반환한다.</p>\n<p>ES8에서 도입된 Object.getOwnPRopertyDescriptors 메서드는 모든 프로퍼티의 프로퍼티 어트리뷰트 정보를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const car = {\n\tprice: 5000,\n\tbrand: &#39;Hyundai&#39;\n};\n\nObject.getOwnPropertyDiscriptors(car);\n//{\n\tprice: {value: 5000, writable: true, enumerable: true, \tconfigurable: true},\n\tbrand: {value: &#39;Hyundai&#39;, writable: true, enumerable: true, configurable: true}\n}</code></pre></div>\n<h2 id=\"3-데이터-프로퍼티와-접근자-프로퍼티\" style=\"position:relative;\"><a href=\"#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"3 데이터 프로퍼티와 접근자 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 데이터 프로퍼티와 접근자 프로퍼티</h2>\n<p><strong>프로퍼티의 구분</strong></p>\n<p>프로퍼티는 데이터 프로퍼티와 접근자 프로퍼티로 구분할 수 있다.</p>\n<ul>\n<li>\n<p>데이터 프로퍼티(data property)</p>\n<ul>\n<li>키와 값으로 구성된 일반적인 프로퍼티다.</li>\n<li>지금까지 살펴본 모든 프로퍼티는 데이터 프로퍼티다.</li>\n</ul>\n</li>\n<li>\n<p>접근자 프로퍼티(accessor property)</p>\n<ul>\n<li>자체적으로 값을 갖지 않는다</li>\n<li>다른 데이터 프로퍼티의 값을 <strong>읽거나 저장</strong>할 때 호출되는 접근자 함수(accessor function) 로 구성된 프로퍼티다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"31-데이터-프로퍼티\" style=\"position:relative;\"><a href=\"#31-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"31 데이터 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 데이터 프로퍼티</h3>\n<p><strong>데이터 프로퍼티의 프로퍼티 어트리뷰트</strong></p>\n<p>데이터 프로퍼티(data property)는 다음과 같은 프로퍼티 어트리뷰트를 갖는다. 이 프로퍼티 어트리뷰트는 자바스크립트 엔진이 프로퍼티를 생성할 때 기본값으로 자동 정의된다.</p>\n<table>\n<thead>\n<tr>\n<th>프로퍼티 어트리뷰트</th>\n<th>프로퍼티 디스크립터 객체의 프로퍼티</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[Value]]</td>\n<td>value</td>\n<td>- 프로퍼티 키를 통해 프로퍼티 값에 접근하면 반환되는 값이다. <br />- 프로퍼티 키를 통해 프로퍼티 값을 변경하면 [[Value]]에 값을 재할당<br />- 이때 프로퍼티가 없으면 프로퍼티를 동적 생성 후 생성된 프로퍼티의 [[Value]]에 값을 저장</td>\n</tr>\n<tr>\n<td>[[Writable]]</td>\n<td>writable</td>\n<td>- 프로퍼티 값의 변경 가능 여부를 나타내며 불리언 값을 갖는다<br />- [[Writable]] 의 값이 false인 경우 해당 프로퍼티의 [[Value]]의 값을 변경할 수 없는 읽기 전용 프로퍼티가 된다.</td>\n</tr>\n<tr>\n<td>[[Enumerable]]</td>\n<td>enumerable</td>\n<td>- 프로퍼티의 열거 가능여부를 나타내며 불리언 값을 갖는다<br />- [[Enumerable]]의 값이 false인 경우 해당 프로퍼티는 for…in 문이나 Object.keys 메서드 등으로 열거할 수 있다</td>\n</tr>\n<tr>\n<td>[[Configurable]]</td>\n<td>configurable</td>\n<td>- 프로퍼티의 재정의 가능 여부를 나타내며 불리언 값을 갖는다<br />- [[Configurable]]의 값이 false인 경우 해당 프로퍼티의 삭제, 프로퍼티 어트리뷰트 값의 변경이 금지된다. <br />- 단 [[Writable]]의 true 인경우 [[Value]] 의 변경과 [[Writable]]을 false로 변경하는 것은 허용된다.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const car = {\n\tprice: 1000\n};\n//데이터프로퍼티의 디스크립터 객체 반환\nconsole.log(Object.getOwnPropertyDiscriptor(car, &#39;price&#39;));\n//{value: 1000, writable: true, enumerable: true, configurable: true}\n\n//프로퍼티 동적추가\ncar.brand = &#39;Hyundai&#39;;\n\nconsole.log(Object.getOwnPropertyDescriptors(car));\n//{\n  price: { value: 1000, writable: true, enumerable: true, configurable: true },\n  brand: {\n    value: &#39;Hyundai&#39;,\n    writable: true,\n    enumerable: true,\n    configurable: true\n  }\n}</code></pre></div>\n<p>리터럴로 객체를 생성하는 경우,</p>\n<p>프로퍼티가 생성될 때 [[Value]] 는 프로퍼티 값으로, 나머지는 true로 초기화된다.</p>\n<p>프로퍼티를 동적 추가해도 마찬가지이다.</p>\n<h3 id=\"32-접근자-프로퍼티\" style=\"position:relative;\"><a href=\"#32-%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"32 접근자 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 접근자 프로퍼티</h3>\n<p><strong>접근자 프로퍼티란</strong></p>\n<p>접근자 프로퍼티(accessor property)는 자체적으로 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용되는 접근자 함수(accessor function) 으로 구성된 프로퍼티이다.</p>\n<p><strong>접근자 프로퍼티의 프로퍼티 어트리뷰트</strong></p>\n<table>\n<thead>\n<tr>\n<th>프로퍼티 어트리뷰트</th>\n<th>프로퍼티 디스크립터 객체의 프로퍼티</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[Get]]</td>\n<td>get</td>\n<td>- 접근자 프로퍼티를 통해 데이터 프로퍼티의 값을 <strong>읽을 때</strong> 호출되는 접근자 함수이다.<br />- 접근자 프로퍼티 키로 프로퍼티 값에 접근하면 프로퍼티 어트립뷰트 [[Get]]의 값, 즉 getter 함수가 호출되고 그 결과가 프로퍼티 값으로 반환된다.</td>\n</tr>\n<tr>\n<td>[[Set]]</td>\n<td>set</td>\n<td>- 접근자 프로퍼티를 통해 데이터프로퍼티의 값을 저장할 때 호출되는 접근자 함수이다.<br />- 즉, 접근자 프로퍼티 키로 프로퍼티 값을 저장하면 프로퍼티 어트리뷰트 [[Set]]의 값, setter 함수가 호출되고 그 결과가 프로퍼티 값으로 저장된다.</td>\n</tr>\n<tr>\n<td>[[Enumerable]]</td>\n<td>enumerable</td>\n<td>데이터 프로퍼티와 동일</td>\n</tr>\n<tr>\n<td>[[Configurable]]</td>\n<td>configurable</td>\n<td>데이터 프로퍼티와 동일</td>\n</tr>\n</tbody>\n</table>\n<p><strong>접근자 함수의 정의</strong></p>\n<p>접근자 함수는 getter / setter 함수라고도 부른다. 접근자 프로퍼티는 getter와 setter 함수를 모두 정의할 수도 있고 하나만 정의할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const person = {\n\t//데이터 프로퍼티\n\tfirstName: &#39;Jiman&#39;,\n\tlastName: &#39;Jeong&#39;,\n\n\t//접근자 프로퍼티\n\n\tget fullName() {\n\t\treturn `${this.firstName} ${this.lastName}`;\n\t},\n\n\tset fullName(name){\n\t\t[this.firstName, this.lastName] = name.split(&#39; &#39;);\n\t}\n};\n\n// setter 함수의 사용\nperson.fullName = &#39;Chansung Jeong&#39;;\n\nconsole.log(person.firstName, person.lastName);\n//Chansung Jeong\n\n//getter 함수 사용\nconsole.log(person.fullName)\nChansung Jeong</code></pre></div>\n<p><strong>접근자 프로퍼티의 동작 원리</strong></p>\n<p>내부슬롯, 메서드 관점에서, 접근자 프로퍼티 fullName으로 프로퍼티 값에 <strong>접근</strong>하면 내부적으로 [[Get]] 내부 메서드가 호출된다.</p>\n<p>[[Get]] 내부 메서드의 동작</p>\n<ol>\n<li>프로퍼티 키가 유효한지 확인한다. 프로퍼티 키는 문자열 또는 심벌이어야 한다</li>\n<li>프로토 타입 체인에서 프로퍼티를 검색한다.</li>\n<li>검색된 프로퍼티가 데이터 프로퍼티인지, 접근자 프로퍼티인지 확인한다.</li>\n<li>접근자 프로퍼티의 프로퍼티 어트리뷰트 [[Get]]의 값인 getter 함수를 호출하여 결과를 반환한다. [[Get]]의 값은 해당 프로퍼티의 디스크립터 객체의 get 프로퍼티 값과 같다</li>\n</ol>\n<p><strong>데이터 프로퍼티와 접근자 프로퍼티를 구별하는 법</strong></p>\n<ul>\n<li>Object.getOwnPropertyDiscriptor 메서드가 반환한 프로퍼티 어트리뷰트 정보를 확인한다.</li>\n</ul>\n<h2 id=\"4-프로퍼티-정의\" style=\"position:relative;\"><a href=\"#4-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%A0%95%EC%9D%98\" aria-label=\"4 프로퍼티 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 프로퍼티 정의</h2>\n<p><strong>프로퍼티 정의란</strong></p>\n<p>프로퍼티 정의란 프로퍼티 어트리뷰트를 정의하는 것이다.</p>\n<ul>\n<li>새로운 프로퍼티를 추가하면서 프로퍼티 어트리뷰트를 명시적으로 정의</li>\n<li>기존 프로퍼티의 프로퍼티 어트리뷰트 재정의</li>\n</ul>\n<p>프로퍼티를 정의함으로서 객체의 프로퍼티가 어떻게 동작해야 하는 지 명확히 정의할 수 있다.</p>\n<p><strong>프로퍼티 어트리뷰트를 정의하는 법</strong></p>\n<p>Object.defineProperty 메서드를 사용하면 프로퍼티의 어트리뷰트를 정의할 수 있다. 인수로는 객체의 참조와 데이터 프로퍼티의 키인 문자열, 프로퍼티 디스크립터 객체를 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const person = {};\n\n//데이터 프로퍼티 정의\nObject.defineProperty(person, &#39;firstName&#39;, {\n\tvalue: &#39;Jiman&#39;,\n\twritable: true,\n\tenumerable: true,\n\tconfigurable: true\n} );\nObject.defineProperty(person, &#39;lastName&#39;, {\n\tvalue: &#39;Jeong&#39;,\n});\n\nconsole.log(Object.getOwnPropertyDescriptors(person));\n//{\n  firstName: {\n    value: &#39;Jiman&#39;,\n    writable: true,\n    enumerable: true,\n    configurable: true\n  },\n  lastName: {\n    value: &#39;Jeong&#39;,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  }\n}\n//누락된 디스크립터 객체의 프로퍼티는 undefined나 false로 초기화된다.\n\n//[[Writable]], [[Enumerable]], [[Configurable]]이 false\n\nperson.lastName = &#39;hihi&#39;;//무시된다. 에러는 x\nconsole.log(Object.keys(person));//{&quot;firstName&quot;} 열거x\ndelete person.lastName;\n//Uncaught TypeError: Cannot redefine property: lastName\n\n\n//접근자 프로퍼티 정의\n\nObject.defineProperty(person,&#39;fullName&#39;, {\n\tget() {\n\t\treturn `${this.firstName} ${this.lastName}`;\n\t},\n\tset(name) {\n\t\t[this.firstName, this.lastName] = name.split(&#39; &#39;);\n\n\t},\n\tenumerable: true,\n\tconfigurable: true\n})</code></pre></div>\n<h2 id=\"5-객체-변경-방지\" style=\"position:relative;\"><a href=\"#5-%EA%B0%9D%EC%B2%B4-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EC%A7%80\" aria-label=\"5 객체 변경 방지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 객체 변경 방지</h2>\n<p><strong>객체는 변경 가능한 값이다</strong></p>\n<p>객체는 재할당 없이 직접 변경할 수 있다.</p>\n<ul>\n<li>프로퍼티 추가 및 삭제</li>\n<li>프로퍼티 값 갱신</li>\n<li>프로퍼티 어트리뷰트 재정의</li>\n</ul>\n<p><strong>객체의 변경을 방지하는 방법</strong></p>\n<p>자바스크립트는 객체의 변경을 방지하는 다양한 메서드를 제공한다. 메서드에 따라 그 범위가 다르다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>메서드</th>\n<th>프로퍼티 추가</th>\n<th>프로퍼티 삭제</th>\n<th>프로퍼티 값 읽기</th>\n<th>프로퍼티 값 쓰기</th>\n<th>프로퍼티 어트리뷰트 재정의</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>객체 확장 금지</td>\n<td>Object.preventExtensions</td>\n<td>x</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n</tr>\n<tr>\n<td>객체 밀봉</td>\n<td>Object.seal</td>\n<td>x</td>\n<td>x</td>\n<td>o</td>\n<td>o</td>\n<td>x</td>\n</tr>\n<tr>\n<td>객체 동결</td>\n<td>Object.freeze</td>\n<td>x</td>\n<td>x</td>\n<td>o</td>\n<td>x</td>\n<td>x</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"51-객체-확장-금지\" style=\"position:relative;\"><a href=\"#51-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9E%A5-%EA%B8%88%EC%A7%80\" aria-label=\"51 객체 확장 금지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 객체 확장 금지</h3>\n<p><strong>Object.preventExtensions</strong></p>\n<p>Object.preventExtensions 메서드는 객체의 확장을 금지한다. 즉 프로퍼티 추가를 금지하는 것이다.</p>\n<p>다음의 프로퍼티 추가 방법이 모두 금지된다.</p>\n<ul>\n<li>프로퍼티 동적추가</li>\n<li>Object.defineProperty 를 통한 프로퍼티 추가 및 정의</li>\n</ul>\n<p>확장 가능여부는 Object.isExtensible 메서드로 확인 가능하다.</p>\n<h3 id=\"52-객체-밀봉\" style=\"position:relative;\"><a href=\"#52-%EA%B0%9D%EC%B2%B4-%EB%B0%80%EB%B4%89\" aria-label=\"52 객체 밀봉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 객체 밀봉</h3>\n<p><strong>Object.seal</strong></p>\n<p>Object.seal 메서드는 객체를 밀봉한다.</p>\n<p>객체 밀봉(seal) 이란 다음을 금지한다.</p>\n<ul>\n<li>프로퍼티 추가 및 삭제</li>\n<li>프로퍼티 어트리뷰트 재정의 금지</li>\n</ul>\n<p>기존 프로퍼티 값의 읽기, 갱신 이외에는 모두 불가하다.</p>\n<p>객체의 밀봉여부는 Object.isSealed 메서드로 확인가능하다.</p>\n<h3 id=\"53-객체-동결\" style=\"position:relative;\"><a href=\"#53-%EA%B0%9D%EC%B2%B4-%EB%8F%99%EA%B2%B0\" aria-label=\"53 객체 동결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 객체 동결</h3>\n<p><strong>Object.freeze</strong></p>\n<p>Object.freeze 메서드는 객체를 동결한다.</p>\n<p>객체 동결(freeze)는 다음을 금지한다.</p>\n<ul>\n<li>프로퍼티 추가 및 삭제</li>\n<li>프로퍼티 어트리뷰트 재정의 금지</li>\n<li>프로퍼티 값 갱신</li>\n</ul>\n<p>즉 동결된 객체는 프로퍼티 값 읽기만 가능하다.</p>\n<p>객체의 동결여부는 Object.isFrozen 메서드로 확인가능하다.</p>\n<h3 id=\"54-불변-객체\" style=\"position:relative;\"><a href=\"#54-%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4\" aria-label=\"54 불변 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4 불변 객체</h3>\n<p><strong>중첩 객체까지 동결하는 방법</strong></p>\n<p>얕은 변경 방지(shallow only)가 아닌 중첩객체까지 동결된 불변객체(immutable object) 를 구현하려면,</p>\n<p>객체를 값으로 갖는 모든 프로퍼티에 대해 재귀적으로 Object.freeze 메서드를 호출해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function deepFreeze(target) {\n\tif(target &amp;&amp; typeof target === &#39;object&#39; &amp;&amp; !Object.isFrozen(target)) {\n\t\tObject.freeze(target);\n\n\t\tObject.keys(target).forEach(key =&gt; Object.deepFreeze(target[key]));\n\t}\n\treturn target;\n}</code></pre></div>","frontmatter":{"title":"javascript 16PropertyAttribute","date":"September 23, 2020"}}},"pageContext":{"slug":"/javascript/javascript-16PropertyAttribute/","previous":{"fields":{"slug":"/javascript/javascript-15let-const-BlockLevelScope/"},"frontmatter":{"title":"let, const & BlockLevelScope","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/javascript-17Constructor/"},"frontmatter":{"title":"javascript 17Constructor","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}