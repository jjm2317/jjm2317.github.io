{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/javascript-18FirstClassObject/","result":{"data":{"site":{"siteMetadata":{"title":"Jiman's Blog","author":"Jeong Jiman","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"2986af82-d275-5293-b5e4-70c74ecc0bb8","excerpt":"함수와 일급 객체 1. 일급 객체 일급 객체의 조건 다음과 같은 조건을 만족하는 객체를 일급 객체(first-class object)라한다 무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성가능하다 변수나 자료구조(객체, 배열 등) 에 저장할 수 있다 함수의 매개변수에게 전달할 수 있다. 함수의 반환값으로 사용할 수 있다. 함수는 일급 객체이다 자바스크립트의 함수는 위의 조건을 모두 만족하므로 일급 객체이다.…","html":"<h1 id=\"함수와-일급-객체\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%99%80-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4\" aria-label=\"함수와 일급 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수와 일급 객체</h1>\n<h2 id=\"1-일급-객체\" style=\"position:relative;\"><a href=\"#1-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4\" aria-label=\"1 일급 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 일급 객체</h2>\n<p><strong>일급 객체의 조건</strong></p>\n<p>다음과 같은 조건을 만족하는 객체를 일급 객체(first-class object)라한다</p>\n<ul>\n<li>무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성가능하다</li>\n<li>변수나 자료구조(객체, 배열 등) 에 저장할 수 있다</li>\n<li>함수의 매개변수에게 전달할 수 있다.</li>\n<li>함수의 반환값으로 사용할 수 있다.</li>\n</ul>\n<p><strong>함수는 일급 객체이다</strong></p>\n<p>자바스크립트의 함수는 위의 조건을 모두 만족하므로 일급 객체이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h2 id=\"2-함수-객체의-프로퍼티\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 함수 객체의 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 함수 객체의 프로퍼티</h2>\n<p><strong>함수는 프로퍼티를 가질 수 있다</strong></p>\n<p>함수는 객체이다. 따라서 함수도 프로퍼티를 가질 수 있다. 브라우저 콘솔에서 console.dir 메서드 실행하면 프로퍼티가 내부에 존재하는 것을 알 수 있다.]</p>\n<p><strong>함수의 프로퍼티의 프로퍼티어트리뷰트</strong></p>\n<p>함수의 프로퍼티에 대해 Object.getOwnPropertyDescriptors 메서드로 확인해보면 다음의 프로퍼티가 존재한다</p>\n<ul>\n<li>\n<p>데이터 프로퍼티</p>\n<ul>\n<li>arguments, caller, length, name, prototype</li>\n<li>일반 객체에는 없는 함수객체 고유의 프로퍼티</li>\n</ul>\n</li>\n<li>\n<p>접근자 프로퍼티</p>\n<ul>\n<li><code class=\"language-text\">__proto__</code></li>\n<li>Object.prototype 객체의 프로퍼티를 상속받았다</li>\n<li>모든 객체가 사용할 수 있다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"21-arguments-프로퍼티\" style=\"position:relative;\"><a href=\"#21-arguments-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"21 arguments 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 arguments 프로퍼티</h3>\n<p><strong>arguments의 프로퍼티 값</strong></p>\n<p>함수 객체의 arguments 프로퍼티 값은 arguments 객체다. arguments 객체는 함수 호출 시 전달된 인수(argument)들의 정보를 담고 있는 순회 가능한(iterable) 유사 배열 객체이며, 함수 내부에서 지역변수처럼 사용된다. 함수외부에서는 참조할 수 없다.</p>\n<p><strong>권장 사용법</strong></p>\n<p>arguments 프로퍼티는 ES3 부터 표준에서 폐지되었다.</p>\n<p>Function.arguments와 같은 사용법은 권장되지 않으며 함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체를 참조하도록 하자</p>\n<p><strong>arguments 객체의 기능</strong></p>\n<p>함수를 정의할 때 선언한 매개변수는 함수 몸체 내부에서 변수와 동일하게 취급된다. 즉, 함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 선언되고 undefined로 초기화된 이후 인수가 할당된다.</p>\n<p>선언된 매개변수의 개수보다 인수를 적게 전달했을 경우 인수가 전달되지 않은 매개변수는 undefined로 초기화된 상태를 유지한다. 매개변수의 개수보다 인수를 더 많이 전달한 경우 초과된 인수는 arguments 객체의 프로퍼티로 보관된다</p>\n<p>arguments 객체는 인수를 프로퍼티 값으로 소유하며 프로퍼티 키는 인수의 순서를 나타낸다. arguents 객체의 callee 프로퍼티는 호출되어 arguments 객체를 생성한 함수, 즉 함수 자신을 가리키고 argumnets 객체의 length 프로퍼티는 인수의 개수를 가리킨다.</p>\n<p><strong>arguments 객체의 Symbol(Symbol.iterator)프로퍼티</strong></p>\n<p>arguments 객체의 Symbol 프로퍼티는 arguments 객체를 순회 가능한 자료구조인 iterable 로 만들기 위한 프로퍼티다. Symbol.iteraotr를 프로퍼티 키로 사용한 메서드를 구현하는 것에 의해 이터러블이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function multiply(x,y ){\n\t//이터레이터\n\tconst iterator = argumnts[Symbol.iterator]();\n\n\t//이터레이터의 next 메서드를 호출하여 이터러블 객체 arguments를 순회\n\tconsole.log(iterator.next());// value: 1\n\tconsole.log(iterator.next());// value: 2\n\n\treturn x * y;\n}\nmultiply(1,2,3);</code></pre></div>\n<p><strong>arguments 객체를 통한 가변인자 함수 구현</strong></p>\n<p>선언된 매개변수의 개수와 함수를 호출할 때 전달하는 인수의 개수를 확인하지 않는 자바스크립트의 특성 때문에 함수가 호출되면 인수 개수를 확인하고 이에 따라 함수의 동작을 달리 정의할 필요가 있을 수 있다. 이때 유용하게 사용되는 것이 arguments 객체다.</p>\n<p>arguments 객체는 매개변수 개수를 확정할 수 없는 가변 인자 함수를 구현할 때 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function multiply(){\n\tlet res = 1;\n\tfor(let i = 0; i &lt; arguments.length; i++){\n\t\tres *= arguments[i];\n\t}\n\n\treturn res;\n}\n\nconsole.log(multiply());//1\nconsole.log(multiply(1,2,6)); //12</code></pre></div>\n<p><strong>arguments 객체는 유사배열 객체이다.</strong></p>\n<p>arguments 객체는 배열 형태로 인자 정보를 담고 있지만 실제 배열이 아닌 유사 배열 객체 (array- like-object)다. 유사 배열 객체란 length 프로퍼티를 가진 객체로 for 문으로 순회가능한 객체를 말한다.</p>\n<p><strong>유사 배열 객체와 이터러블</strong></p>\n<p>ES6에서 도입된 이터레이션 프로토콜을 준수하면 순회가능한 자료구조인 이터러블이 된다. 이터러블의 개념이 없었던 ES5에서 arguments 객체는 유사배열객체로 구분되었다. 하지만 이터러블이 도입된 ES6부터 arguments 객체는 유사 배열 객체이면서 동시에 이터러블이다.</p>\n<p><strong>유사 배열 객체의 특징</strong></p>\n<p>유사 배열 객체는 배열이 아니므로 배열 메서드를 사용할 경우 에러가 발생한다. 따라서 배열 메서드를 사용하려면 Function.prototype.call, Function.prototype.apply 를 사용해 간접 호출해야하는 번거로움이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function multiply(){\n\tconst array = Array.prototype.slice.call(arguments);\n\treturn array.reduce(function (pre, cur) {\n\t\treturn pre * cur;\n\t}, 1);\n}\n\nconsole.log(multiply());//1\nconsole.log(multiply(1,2,6)); //12</code></pre></div>\n<p><strong>ES6의 Rest 파라미터</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function multiply(...args){\n\treturn args.reduce((pre, cur) =&gt; pre * cur, 1);\n}\nconsole.log(multiply(3,5,6));//90</code></pre></div>\n<h3 id=\"22-caller-프로퍼티\" style=\"position:relative;\"><a href=\"#22-caller-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"22 caller 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 caller 프로퍼티</h3>\n<p><strong>caller 프로퍼티의 값</strong></p>\n<p>caller 프로퍼티는 ECMAScript 사양에 포함되지 않은 비표준 프로퍼티다. 이후 표준화될 예정도 없는 프로퍼티이므로 참고로만 알아두자.</p>\n<p>함수객체의 caller 프로퍼티는 함수 자신을 호출한 함수를 가리킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo(func) {\n\treturn func();\n}\n\nfunction bar() {\n\treturn &#39;caller: &#39; + bar.caller;\n}\n\n\nconsole.log(foo(bar));//caller: function foo(func) {\n\treturn func();\n}\n\nconsole.log(bar());</code></pre></div>\n<h3 id=\"23-length-프로퍼티\" style=\"position:relative;\"><a href=\"#23-length-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"23 length 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 length 프로퍼티</h3>\n<p>함수 객체의 length 프로퍼티는 함수를 정의할 때 선언한 매개변수의 개수를 가리킨다.</p>\n<h3 id=\"24-name-프로퍼티\" style=\"position:relative;\"><a href=\"#24-name-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"24 name 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 name 프로퍼티</h3>\n<p>함수 객체의 name 프로퍼티는 함수 이름을 나타낸다 ES6부터 정식 표준이다.</p>\n<p>익명함수 표현식에서, ES5에서는 빈문자열을 반환했지만, ES6에서는 함수객체를 가리키는 식별자를 반환한다.</p>\n<h3 id=\"25-code-classlanguage-text__proto__code접근자-프로퍼티\" style=\"position:relative;\"><a href=\"#25-code-classlanguage-text__proto__code%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"25 code classlanguage text__proto__code접근자 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5 <code class=\"language-text\">__proto__</code>접근자 프로퍼티</h3>\n<p>모든 객체는 [[Prototype]]이라는 내부 슬롯을 갖는다. [[Prototype] ]내부슬롯은 객체 지향 프로그래밍의 상속을 구현하는 프로토타입 객체를 가리킨다.</p>\n<p><code class=\"language-text\">__proto__</code>접근자 프로퍼티는 [[Prototype]]내부 슬롯이 가리키는 프로토타입 객체에 접근하기 위해 사용하는 접근자 프로퍼티다.</p>\n<h3 id=\"26-prototype-프로퍼티\" style=\"position:relative;\"><a href=\"#26-prototype-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"26 prototype 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6 prototype 프로퍼티</h3>\n<p>prototype 프로퍼티는 생성자 함수로 호출할 수 있는 함수 객체, 즉 constructor 만이 소유하는 프로퍼티다. 일반 객체와 생성자 함수로 호출할 수 없는 non-constructor 에는 prototype 프로퍼티가 없다.</p>","frontmatter":{"title":"javascript 18FirstClassObject","date":"September 25, 2020"}}},"pageContext":{"slug":"/javascript/javascript-18FirstClassObject/","previous":{"fields":{"slug":"/javascript/javascript-17Constructor/"},"frontmatter":{"title":"javascript 17Constructor","category":"javascript","draft":false}},"next":{"fields":{"slug":"/javascript/javascript-Sorting-practice/"},"frontmatter":{"title":"javascript Sorting practice","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}