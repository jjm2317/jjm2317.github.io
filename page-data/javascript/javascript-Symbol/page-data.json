{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/javascript-Symbol/","result":{"data":{"site":{"siteMetadata":{"title":"Jiman's Blog","author":"Jeong Jiman","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6382c7b8-4d32-59c7-b416-c5d603ba99e1","excerpt":"Symbol Symbol 이란? Symbol은 데이터 타입이다. ES6에서 Symbol 데이터 타입이 새로 추가되어 자바스크립트의 데이터 타입은 다음과 같은 7가지가 되었다. String Number Boolean undefined null object Symbol Symbol의 특징 원시값으로 불변 값이다. 다른값과 중복되지 않는 유일한 값이다. 사용하는 이유 이름 충돌위험이 없는 유일한 프로퍼티 키를 만들기 위해 사용한다. 상수를 구현할 때 사용된다. Symbol 값의 생성 Symbol…","html":"<h1 id=\"symbol\" style=\"position:relative;\"><a href=\"#symbol\" aria-label=\"symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol</h1>\n<h2 id=\"symbol-이란\" style=\"position:relative;\"><a href=\"#symbol-%EC%9D%B4%EB%9E%80\" aria-label=\"symbol 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol 이란?</h2>\n<p>Symbol은 데이터 타입이다.</p>\n<p>ES6에서 <strong>Symbol 데이터 타입</strong>이 새로 추가되어 자바스크립트의 데이터 타입은 다음과 같은 7가지가 되었다.</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>undefined</li>\n<li>null</li>\n<li>object</li>\n<li>Symbol</li>\n</ul>\n<p><strong>Symbol의 특징</strong></p>\n<ul>\n<li>원시값으로 불변 값이다.</li>\n<li>다른값과 중복되지 않는 유일한 값이다.</li>\n</ul>\n<p><strong>사용하는 이유</strong></p>\n<ul>\n<li>이름 충돌위험이 없는 유일한 <strong>프로퍼티 키</strong>를 만들기 위해 사용한다.</li>\n<li>상수를 구현할 때 사용된다.</li>\n</ul>\n<h2 id=\"symbol-값의-생성\" style=\"position:relative;\"><a href=\"#symbol-%EA%B0%92%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-label=\"symbol 값의 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol 값의 생성</h2>\n<p>Symbol 값을 생성하는 방법은 다음과 같다</p>\n<ul>\n<li>Symbol 함수</li>\n<li>Symbol.for</li>\n<li>Symbol.keyFor</li>\n</ul>\n<h3 id=\"symbol-함수\" style=\"position:relative;\"><a href=\"#symbol-%ED%95%A8%EC%88%98\" aria-label=\"symbol 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol 함수</h3>\n<p>Symbol값은 다른 원시값들과 다르게 Symbol 함수를 호출하여야만 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//생성된 심벌 값은 외부에서 확인 할 수 없다.</span>\n<span class=\"token keyword\">const</span> mySymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySymbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Symbol()</span>\n\n<span class=\"token comment\">//심벌 함수는 생성자가 아니다.</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span></code></pre></div>\n<p><strong>Symbol 함수의 인수</strong></p>\n<p>Symbol 함수는 문자열을 인수로 받을 수 있다. 단 해당 값은 description의 용도로만 사용된다.</p>\n<p>즉, 같은 description 을 전달한 심벌 값 두개는 다른 값이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> firstSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> secondSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirstSymbol <span class=\"token operator\">===</span> secondSymbol<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p><strong>래퍼 객체 생성</strong></p>\n<p>심벌값은 원시값이지만 Symbol.prototype의 프로퍼티를 사용하여 접근하면 래퍼객체를 생성한다.</p>\n<p>(참고) 래퍼 객체를 생성하는 원시값</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n</ul>\n<p>Symbol.prototype의 프로퍼티 description, toString()</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mySymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmySymbol<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello</span>\nmySymbol<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//mySymbol(hello)</span></code></pre></div>\n<p><strong>Symbol 값의 타입변환</strong></p>\n<ul>\n<li>문자열이나 숫자값으로 암묵적 타입변환이 일어나지 않는다</li>\n<li>불리언 값으로는 암묵적 타입변환이 일어난다.</li>\n</ul>\n<h3 id=\"symbolfor--symbolkeyfor\" style=\"position:relative;\"><a href=\"#symbolfor--symbolkeyfor\" aria-label=\"symbolfor  symbolkeyfor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.for / Symbol.keyFor</h3>\n<p><strong>Symbol.for 과 Symbol 함수와의 차이점</strong></p>\n<p>심벌값들이 관리되는 전역 심벌 레지스트리가 있다.</p>\n<p>위의 Symbol함수를 통한 심벌값의 경우에는 전역 심벌 레지스트리에 저장되지 않을뿐더러, 심벌 레지스트리에서 해당 심벌값을 찾을 수 있는 키를 지정할 수 있는 방법도 없다.</p>\n<p>이에 반해 Symbol.for 함수는 <strong>인수로 키를 전달</strong>하여 생성된 <strong>심벌 값을 전역 심벌 레지스트리에 저장하거나 조회</strong>한다. 키에 해당하는 값이 없으면 심벌값을 생성하고, 존재하면 조회한다.</p>\n<ul>\n<li>Symbol.for 함수의 인수로 전달한 키에 해당하는 심벌값이 심벌 레지스트리에 없는 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mySymbol <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 심벌 레지스트리에 hello를 키로 가진 심벌값이 없으므로 심벌 값을 생성한다.</span>\n<span class=\"token keyword\">const</span> mySymbol2 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//심벌레지스트리에 hello를 키로 가진 심벌 값이 위에서 생성되어 존재하므로 해당 값을 반환한다.</span>\nmySymbol <span class=\"token operator\">===</span> mySymbol2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><strong>Symbol.keyFor</strong></p>\n<p>심벌값을 저장한 변수를 인수로 전달하면 해당 심벌값의 키를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mySymbol <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//hello를 키로하여 심볼값 생성</span>\nSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">keyFor</span><span class=\"token punctuation\">(</span>mySymbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//hello,  mySymbol 변수에 저장된 심벌값의 키를 반환</span></code></pre></div>\n<h2 id=\"symbol-사용-예시\" style=\"position:relative;\"><a href=\"#symbol-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"symbol 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol 사용 예시</h2>\n<h3 id=\"상수-구현\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%88%98-%EA%B5%AC%ED%98%84\" aria-label=\"상수 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상수 구현</h3>\n<p>react_prac 레포의 컴포넌트를 조건부 렌더링을 한다고 가정했을때 출력모드를 설정해보자</p>\n<p><strong>원시값을 통한 상수 구현</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> RenderModes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">COUNTER</span><span class=\"token operator\">:</span> <span class=\"token string\">\"counter\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ALL</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*some codes(출력 모드에따른 렌더링)*/</span></code></pre></div>\n<p>상수 이름에 할당된 값은 <strong>다른 값들과 중복될 가능성</strong>이 있고 <strong>변경될 가능성</strong>도 있다.</p>\n<p><strong>심벌을 통한 상수 구현</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> RenderModes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">COUNTER</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"counter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ALL</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다른 값들과 <strong>중복될 가능성이 없다</strong></p>\n<p><strong>Object.freeze를 통한 enum 구현</strong></p>\n<p>enum은 숫자 상수의 집합이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> RenderModes <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">COUNTER</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"counter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ALL</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 객체는 <strong>변경될 가능성이 없다.</strong></p>\n<h3 id=\"유일한-프로퍼티-키-생성\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%9D%BC%ED%95%9C-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%82%A4-%EC%83%9D%EC%84%B1\" aria-label=\"유일한 프로퍼티 키 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유일한 프로퍼티 키 생성</h3>\n<p><strong>Symbol로 프로퍼티 만드는법</strong></p>\n<ul>\n<li>Symbol값을 대괄호로 묶어서 프로퍼티키에 사용한다.</li>\n<li>프로퍼티 값 참조시, 마찬가지로 대괄호 접근연산자로 참조한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//hello</span></code></pre></div>\n<p><strong>다른 프로퍼티 키와 충돌할 위험이 없다.</strong></p>\n<p><strong>프로퍼티 은닉 효과</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//위 코드</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// none</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[]</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\n\n<span class=\"token comment\">//찾는법</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Symbol(myKey)</span></code></pre></div>\n<p>for in 문, Object.keys 메서드, Object.getOwnPropertyNames 메서드로 찾을 수 없다.</p>\n<p>프로퍼티 은닉효과를 이용해서 만약 표준 빌트인 객체를 확장할 필요가 있는 경우 Symbol을 통해 확장할 수 있다.</p>\n<h2 id=\"well-known-symbol-symboliterator\" style=\"position:relative;\"><a href=\"#well-known-symbol-symboliterator\" aria-label=\"well known symbol symboliterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Well-known Symbol, Symbol.iterator</h2>\n<p>자바스크립트가 기본으로 제공하는 Symbol 값이 있다. 이 Symbol 값은 Symbol 함수의 프로퍼티로 저장되어 있다.</p>\n<p>이러한 built-in Symbol 값을 Well-known Symbol이라고 한다.</p>\n<p>대표적인 것으론 <strong>Symbol.iterator</strong> 메서드가 있다.</p>\n<p>이 메서드는 <strong>이터러블</strong>을 구현하는데 사용된다.</p>\n<p>(참고) 이터러블 종류</p>\n<ul>\n<li>String, Array, Map, Set, arguments, NodeList 등</li>\n</ul>\n<p>이터러블은 Symbol.iterator 메서드를 가진다.</p>\n<p><strong>Symbol.iterator는 호출되어 iterator를 반환한다.</strong></p>\n<p>빌트인 이터러블은 이러한 과정을 이터레이션 프로토콜로서 준수한다.</p>\n<p>일반객체가 이터레이션 프로토콜을 준수하게되면 이터러블이 된다.</p>\n<p><strong>일반 객체를 이터러블로 만드는 방법</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> cur<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> cur <span class=\"token operator\">></span> max <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"javascript Symbol","date":"April 24, 2021"}}},"pageContext":{"slug":"/javascript/javascript-Symbol/","previous":{"fields":{"slug":"/etc/UI-CircleProgress/"},"frontmatter":{"title":"UI CircleProgress","category":"etc","draft":false}},"next":{"fields":{"slug":"/javascript/javascript-Iterable/"},"frontmatter":{"title":"Iterable","category":"javascript","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}