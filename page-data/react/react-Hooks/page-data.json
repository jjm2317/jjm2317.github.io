{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/react-Hooks/","result":{"data":{"site":{"siteMetadata":{"title":"Jiman's Blog","author":"Jeong Jiman","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2c2c70aa-6fb9-57b3-8579-3124ed9a6df5","excerpt":"리액트 Hooks 발표자료 목차 Hooks란? useState useEffect useReducer useMemo useCallback useRef Hooks란 리액트 패키지에서 제공하는 함수들 각 함수를 hook이라고 하며 특정한 기능을 구현하는데 쓰임 함수형 컴포넌트의 사용 Hooks가 도입되기 전에는 함수형 컴포넌트에서 state를 통한 상태관리를 할 수 없었다. 클래스에서는 Component를 가져와 state를 사용하는 것이 가능했지만 함수형은 지원되는 기능이 없었다. Hooks…","html":"<h1 id=\"리액트-hooks-발표자료\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-hooks-%EB%B0%9C%ED%91%9C%EC%9E%90%EB%A3%8C\" aria-label=\"리액트 hooks 발표자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 Hooks 발표자료</h1>\n<p><strong>목차</strong></p>\n<ul>\n<li>Hooks란?</li>\n<li>useState</li>\n<li>useEffect</li>\n<li>useReducer</li>\n<li>useMemo</li>\n<li>useCallback</li>\n<li>useRef</li>\n</ul>\n<p><strong>Hooks란</strong></p>\n<ul>\n<li>\n<p>리액트 패키지에서 제공하는 함수들</p>\n<ul>\n<li>각 함수를 hook이라고 하며 특정한 기능을 구현하는데 쓰임</li>\n</ul>\n</li>\n</ul>\n<p><strong>함수형 컴포넌트의 사용</strong></p>\n<ul>\n<li>\n<p>Hooks가 도입되기 전에는 함수형 컴포넌트에서 state를 통한 상태관리를 할 수 없었다.</p>\n<ul>\n<li>클래스에서는 Component를 가져와 state를 사용하는 것이 가능했지만 함수형은 지원되는 기능이 없었다.</li>\n</ul>\n</li>\n<li>Hooks 도입후 useState, useEffect 등으로 상태관리 등의 다양한 작업이 가능해졌다.</li>\n<li>즉 클래스형 컴포넌트의 기능을 사용할 수 있는 함수형 컴포넌트를 Hooks를 통해구현 가능하다.</li>\n</ul>\n<p><strong>장점</strong></p>\n<ul>\n<li>함수의 재사용 가능</li>\n<li>\n<p>클래스형 컴포넌트에 비해 가독성이 좋다</p>\n<ul>\n<li>클래스형 컴포넌트는 로직이 한 곳에 모여있음</li>\n<li>함수형 컴포넌트는 로직을 분리시킨 후 조립하는 형태</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-usestate\" style=\"position:relative;\"><a href=\"#1-usestate\" aria-label=\"1 usestate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. useState</h2>\n<ul>\n<li>가장 기본적인 Hook</li>\n<li>상태관리</li>\n</ul>\n<p><strong>useState의 기능</strong></p>\n<p>함수형 컴포넌트에서도 상태관리를 가능하게 하여 가변적인 상태를 지닐 수 있게 해준다. 즉 상태관리할 때 useState 사용</p>\n<p><strong>사용법</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, {useState} from &#39;react&#39;;\n\nconst f = () =&gt; {\n\tconst[state, setState] = useState(&#39;init&#39;)\n\n    // ...\n}</code></pre></div>\n<p>**예제1 - **Counter.js</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">//리액트 패키지에서 useState 훅 가져오기\nimport React, {useState} from &#39;react&#39;;\n\n//함수형 컴포넌트 작성\nconst Counter = () =&gt; {\n  //useState함수는 배열을 반환\n\t//배열 비구조화 할당으로 변수 선언\n  //[상태 값, 상태를 설정하는 함수]\n  //useState(상태의 기본값, 즉 value의 초기값)\n  const [value, setValue] = useState(0)\n\n  //JSX 반환문\n  //버튼을 클릭 시 value를 증가시키기\n  //이벤트 핸들러 어트리뷰트 방식\n  return (\n    &lt;div&gt;\n      &lt;p&gt;{value}&lt;/p&gt;\n      &lt;button onClick = {()=&gt; setValue(value +1)}&gt;증가&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default Counter;</code></pre></div>\n<p><strong>useState 여러번 사용</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">//리액트 패키지에서 useState 훅 가져오기\nimport React, { useState } from &quot;react&quot;;\n\n//함수형 컴포넌트 작성\nconst Counter = () =&gt; {\n  //useState호출하여 상태를 나타내는 변수 선언\n  const [value, setValue] = useState(0);\n  const [value2, setValue2] = useState(&quot;체크&quot;);\n  //JSX 반환문\n  //버튼을 클릭 시 value를 증가시키기\n  return (\n    &lt;div&gt;\n      &lt;p&gt;{value}&lt;/p&gt;\n      &lt;button onClick = {()=&gt;setValue(value+1)}&gt;증가&lt;/button&gt;\n      &lt;p&gt;{value2}&lt;/p&gt;\n      &lt;input type=&quot;checkbox&quot; onChange = {e =&gt; setValue2(e.target.checked?&#39;체크됨&#39; : &#39;체크안됨&#39;)}/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;</code></pre></div>\n<h2 id=\"2-useeffect\" style=\"position:relative;\"><a href=\"#2-useeffect\" aria-label=\"2 useeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. useEffect</h2>\n<ul>\n<li>리액트 컴포넌트가 렌더링 될때마다 특정 작업을 수행하도록 설정할 수 있는 Hook</li>\n<li>\n<p>useState가 상태를 초기화, 변화시켰다면 useEffect는 상태변화를 감지</p>\n<ul>\n<li>마운트(렌더링 직후)를 감지</li>\n<li>업데이트(상태의 변화) 를 감지</li>\n</ul>\n</li>\n<li>첫 번째에는 콜백함수, 두번째로는 배열 전달</li>\n</ul>\n<p><strong>사용법</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, {useState, useEffect} from &#39;react&#39;;\n\nconst f = () =&gt;{\n\tconst [value, setValue] = useState(&#39;init&#39;)\n\n\tuseEffect(()=&gt;{}, [value])\n}</code></pre></div>\n<p><strong>내 예제: useEffect 마운트 , 업데이트 감지</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { useState } from &quot;react&quot;;\n\n//함수형 컴포넌트 작성\nconst Counter = () =&gt; {\n  //useState\n  const [value, setValue] = useState(0);\n  const [value2, setValue2] = useState(&quot;체크안됨&quot;);\n  //useEffect 호출 : 마운트, 업데이트 감지\n    useEffect(()=&gt;{\n        console.log(&#39;렌더링 완료&#39;,value, value2)\n    })\n  return (\n    &lt;div&gt;\n      &lt;p&gt;{value}&lt;/p&gt;\n      &lt;button onClick = {()=&gt;setValue(value+1)}&gt;증가&lt;/button&gt;\n      &lt;p&gt;{value2}&lt;/p&gt;\n      &lt;input type=&quot;checkbox&quot; onChange = {e =&gt; setValue2(e.target.checked?&#39;체크됨&#39; : &#39;체크안됨&#39;)}/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;</code></pre></div>\n<p><strong>useEffect 마운트만 감지</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { useState } from &quot;react&quot;;\n\n//함수형 컴포넌트 작성\nconst Counter = () =&gt; {\n  //useState\n  const [value, setValue] = useState(0);\n  const [value2, setValue2] = useState(&quot;체크안됨&quot;);\n  //useEffect 호출 : 마운트만 감지\n  //두번째 인수로 빈배열 전달\n    useEffect(()=&gt;{\n        console.log(&#39;렌더링 완료&#39;, value, value2);\n    },[])\n  return (\n   // ...\n  );\n};\n\nexport default Counter;</code></pre></div>\n<p><strong>useEffect 특정 값 업데이트만 감지</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { useState } from &quot;react&quot;;\n\n//함수형 컴포넌트 작성\nconst Counter = () =&gt; {\n  //useState\n  const [value, setValue] = useState(0);\n  const [value2, setValue2] = useState(&quot;체크안됨&quot;);\n  //useEffect 호출 : 마운트, 특정 값 업데이트 감지\n  //두번째 인수로 준 빈배열에 해당 state입력\n    useEffect(()=&gt;{\n        console.log(&#39;렌더링 완료&#39;, value, value2);\n    },[value])\n  return (\n   // ...\n  );\n};\n\nexport default Counter;</code></pre></div>\n<p><strong>useEffect 뒷정리</strong></p>\n<ul>\n<li>기본적으로 업데이트 직전에 뒷정리 함수가 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">useEffect(()=&gt;{\n        console.log(&#39;렌더링 완료&#39;, value, value2);\n    \treturn ()=&gt;console.log(&#39;업데이트 전&#39;);\n    });</code></pre></div>\n<ul>\n<li>컴포넌트의 언마운트 직전에도 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">useEffect(()=&gt;{\n        console.log(&#39;렌더링 완료&#39;, value, value2);\n    \treturn ()=&gt;console.log(&#39;언마운트 전&#39;);\n    });\n// ......\n// App.js\nimport React, { useState } from &quot;react&quot;;\nimport Counter from &quot;./Counter&quot;;\n\nconst App = () =&gt; {\n  const [checked, setChecked] = useState(false);\n  return (\n    &lt;div&gt;\n      &lt;label key=&quot;check&quot;&gt;보이기&lt;input id =&quot;check&quot;type = &quot;checkbox&quot;onChange ={e =&gt; setChecked(e.target.checked)}/&gt;&lt;/label&gt;\n      {checked?&lt;Counter /&gt; : &lt;b&gt;닫힘&lt;/b&gt;}\n    &lt;/div&gt;\n  );\n};\n\nexport default App;</code></pre></div>\n<ul>\n<li>언마운트 직전에만 호출하고 싶다면</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//두번쩨 인수에 빈배열 전달\nuseEffect(()=&gt;{\n        console.log(&#39;렌더링 완료&#39;, value, value2);\n    \treturn ()=&gt;console.log(&#39;언마운트 전&#39;);\n    },[]);</code></pre></div>\n<p><strong>책 예제</strong>: Info.js</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, {useState, useEffect} from &#39;react&#39;;\n\nconst Info = () =&gt; {\n  //useState로 상태 기본값 설정\n  const [name, setName] = useState(&#39;&#39;);\n  const [nickname, setNickname]= useState(&#39;&#39;);\n  //useEffect: 마운트(렌더링 직후)를 감지, 업데이트(상태변화)를 감지\n  useEffect(() =&gt; {\n    console.log(&#39;렌더링이 완료되었습니다!&#39;);\n    console.log({\n      name,\n      nickname\n    });\n    return ()=&gt;console.log(&#39;언마운트 직전&#39;);\n  },[]);\n\n  //이벤트 핸들러 함수 선언\n  const onChangeName = e =&gt; {\n    setName(e.target.value);\n  };\n\n  const onChangeNickname = e =&gt; {\n    setNickname(e.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;input value={name} onChange = {onChangeName}/&gt;\n        &lt;input value={nickname} onChange={onChangeNickname}/&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div&gt;\n          &lt;b&gt;이름:&lt;/b&gt; {name}\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;b&gt;닉네임:&lt;/b&gt; {nickname}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default Info;</code></pre></div>\n<p><strong>책예제: App.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { useState } from &quot;react&quot;;\nimport Info from &quot;./Info&quot;;\n\nconst App = () =&gt; {\n  const [checked, setChecked] = useState(false);\n  return (\n    &lt;div&gt;\n      &lt;label for=&quot;check&quot;&gt;보이기&lt;input id =&quot;check&quot;type = &quot;checkbox&quot;onChange ={e =&gt; setChecked(e.target.checked)}/&gt;&lt;/label&gt;\n      {checked?&lt;Info /&gt; : &lt;b&gt;닫힘&lt;/b&gt;}\n    &lt;/div&gt;\n  );\n};\n\nexport default App;</code></pre></div>\n<h2 id=\"3-usereducer\" style=\"position:relative;\"><a href=\"#3-usereducer\" aria-label=\"3 usereducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. useReducer</h2>\n<ul>\n<li>상태관리 함수</li>\n<li>useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른값으로 업데이트 해주고 싶을때 사용</li>\n<li>리듀서 함수에서 새로운 상태를 만들때는 불변성을 지켜야함</li>\n</ul>\n<p><strong>사용법</strong></p>\n<ul>\n<li>useReducer의 첫 번째 파라미터에 리듀서 함수, 두번째 파라미터에 해당 리듀서의 기본값</li>\n<li>state : 현재 가리키고 있는 상태</li>\n<li>dispatch: 액션을 발생시키는 함수</li>\n</ul>\n<p><strong>책 예제: CounterReducer</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, {useReducer} from &#39;react&#39;;\n//리듀서 함수 정의\n\nfunction reducer(state, action){\n\tswitch(action.type){\n\t\tcase &#39;INCREMENT&#39;:\n\t\t\treturn{ value: state.value + 1};\n        case &#39;DECREMENT&#39; :\n            return{ value: state.value -1 };\n        default:\n            return state;\n\t}\n}\n\nconst Counter = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, {value: 0});\n\n    return(\n    \t&lt;div&gt;\n        \t&lt;p&gt;\n            \t현재 카운터 값 : {state.value}\n            &lt;/p&gt;\n            &lt;button onClick= {()=&gt;dispatch({type: &#39;INCREMENT&#39;})}&gt;\n                +1\n            &lt;/button&gt;\n            &lt;button onClick= {()=&gt;dispatch({type: &#39;DECREMENT&#39;})}&gt;\n                -1\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\nexport default Counter;</code></pre></div>","frontmatter":{"title":"react Hooks","date":"November 14, 2020"}}},"pageContext":{"slug":"/react/react-Hooks/","previous":{"fields":{"slug":"/javascript/javascript-module/"},"frontmatter":{"title":"javascript module","category":"javascript","draft":false}},"next":{"fields":{"slug":"/database/db-Day1-settings/"},"frontmatter":{"title":"db Day1 settings","category":"database","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}